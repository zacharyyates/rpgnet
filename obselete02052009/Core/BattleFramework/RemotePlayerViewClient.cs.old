//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YatesMorrison.RolePlay.BattleFramework
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectPosition", Namespace="http://schemas.datacontract.org/2004/07/YatesMorrison.RolePlay.BattleFramework")]
    public partial class ObjectPosition : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemotePlayerView", CallbackContract=typeof(RemotePlayerViewCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface RemotePlayerView
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemotePlayerView/Connect", ReplyAction="http://tempuri.org/RemotePlayerView/ConnectResponse")]
    void Connect();
    
    [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/RemotePlayerView/Disconnect", ReplyAction="http://tempuri.org/RemotePlayerView/DisconnectResponse")]
    void Disconnect();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface RemotePlayerViewCallback
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemotePlayerView/ActorMoved", ReplyAction="http://tempuri.org/RemotePlayerView/ActorMovedResponse")]
    void ActorMoved(string actorId, YatesMorrison.RolePlay.BattleFramework.ObjectPosition toPosition);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface RemotePlayerViewChannel : RemotePlayerView, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class RemotePlayerViewClient : System.ServiceModel.DuplexClientBase<RemotePlayerView>, RemotePlayerView
{
    
    public RemotePlayerViewClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public RemotePlayerViewClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public RemotePlayerViewClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public RemotePlayerViewClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public RemotePlayerViewClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public void Connect()
    {
        base.Channel.Connect();
    }
    
    public void Disconnect()
    {
        base.Channel.Disconnect();
    }
}