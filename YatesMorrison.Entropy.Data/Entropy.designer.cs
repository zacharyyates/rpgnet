#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YatesMorrison.Entropy.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="YatesMorrison.Entropy.Db")]
	public partial class EntropyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGameData(GameData instance);
    partial void UpdateGameData(GameData instance);
    partial void DeleteGameData(GameData instance);
    partial void InsertCharacterData(CharacterData instance);
    partial void UpdateCharacterData(CharacterData instance);
    partial void DeleteCharacterData(CharacterData instance);
    #endregion
		
		public EntropyDataContext() : 
				base(global::YatesMorrison.Entropy.Data.Properties.Settings.Default.YatesMorrison_Entropy_DbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EntropyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntropyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntropyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntropyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<GameData> GameDatas
		{
			get
			{
				return this.GetTable<GameData>();
			}
		}
		
		public System.Data.Linq.Table<CharacterData> CharacterDatas
		{
			get
			{
				return this.GetTable<CharacterData>();
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Email;
		
		private string _Password;
		
		private string _DisplayName;
		
		private EntitySet<GameData> _GameDatas;
		
		private EntitySet<CharacterData> _CharacterDatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public User()
		{
			this._GameDatas = new EntitySet<GameData>(new Action<GameData>(this.attach_GameDatas), new Action<GameData>(this.detach_GameDatas));
			this._CharacterDatas = new EntitySet<CharacterData>(new Action<CharacterData>(this.attach_CharacterDatas), new Action<CharacterData>(this.detach_CharacterDatas));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="NVarChar(50)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Association(Name="User_GameData", Storage="_GameDatas", ThisKey="Id", OtherKey="MasterId")]
		public EntitySet<GameData> GameDatas
		{
			get
			{
				return this._GameDatas;
			}
			set
			{
				this._GameDatas.Assign(value);
			}
		}
		
		[Association(Name="User_CharacterData", Storage="_CharacterDatas", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<CharacterData> CharacterDatas
		{
			get
			{
				return this._CharacterDatas;
			}
			set
			{
				this._CharacterDatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameDatas(GameData entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GameDatas(GameData entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CharacterDatas(CharacterData entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CharacterDatas(CharacterData entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.GameData")]
	public partial class GameData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _MasterId;
		
		private string _Name;
		
		private EntitySet<CharacterData> _CharacterDatas;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnMasterIdChanging(System.Nullable<System.Guid> value);
    partial void OnMasterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public GameData()
		{
			this._CharacterDatas = new EntitySet<CharacterData>(new Action<CharacterData>(this.attach_CharacterDatas), new Action<CharacterData>(this.detach_CharacterDatas));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_MasterId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MasterId
		{
			get
			{
				return this._MasterId;
			}
			set
			{
				if ((this._MasterId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMasterIdChanging(value);
					this.SendPropertyChanging();
					this._MasterId = value;
					this.SendPropertyChanged("MasterId");
					this.OnMasterIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="GameData_CharacterData", Storage="_CharacterDatas", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<CharacterData> CharacterDatas
		{
			get
			{
				return this._CharacterDatas;
			}
			set
			{
				this._CharacterDatas.Assign(value);
			}
		}
		
		[Association(Name="User_GameData", Storage="_User", ThisKey="MasterId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GameDatas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GameDatas.Add(this);
						this._MasterId = value.Id;
					}
					else
					{
						this._MasterId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CharacterDatas(CharacterData entity)
		{
			this.SendPropertyChanging();
			entity.GameData = this;
		}
		
		private void detach_CharacterDatas(CharacterData entity)
		{
			this.SendPropertyChanging();
			entity.GameData = null;
		}
	}
	
	[Table(Name="dbo.CharacterData")]
	public partial class CharacterData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _GameId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Data;
		
		private EntityRef<GameData> _GameData;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnGameIdChanging(System.Nullable<System.Guid> value);
    partial void OnGameIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public CharacterData()
		{
			this._GameData = default(EntityRef<GameData>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_GameId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._GameData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="GameData_CharacterData", Storage="_GameData", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public GameData GameData
		{
			get
			{
				return this._GameData.Entity;
			}
			set
			{
				GameData previousValue = this._GameData.Entity;
				if (((previousValue != value) 
							|| (this._GameData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameData.Entity = null;
						previousValue.CharacterDatas.Remove(this);
					}
					this._GameData.Entity = value;
					if ((value != null))
					{
						value.CharacterDatas.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GameData");
				}
			}
		}
		
		[Association(Name="User_CharacterData", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CharacterDatas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CharacterDatas.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
