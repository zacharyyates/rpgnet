#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YatesMorrison.RolePlay.D20.Past.Treasure
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="YMS_RPG_TREASURE")]
	public partial class TreasureDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGoods_ArtObject(Goods_ArtObject instance);
    partial void UpdateGoods_ArtObject(Goods_ArtObject instance);
    partial void DeleteGoods_ArtObject(Goods_ArtObject instance);
    partial void InsertGoods_ArtObjectText(Goods_ArtObjectText instance);
    partial void UpdateGoods_ArtObjectText(Goods_ArtObjectText instance);
    partial void DeleteGoods_ArtObjectText(Goods_ArtObjectText instance);
    partial void InsertGoods_Gem(Goods_Gem instance);
    partial void UpdateGoods_Gem(Goods_Gem instance);
    partial void DeleteGoods_Gem(Goods_Gem instance);
    partial void InsertGoods_GemText(Goods_GemText instance);
    partial void UpdateGoods_GemText(Goods_GemText instance);
    partial void DeleteGoods_GemText(Goods_GemText instance);
    partial void InsertGoods_ByEncounterLevel(Goods_ByEncounterLevel instance);
    partial void UpdateGoods_ByEncounterLevel(Goods_ByEncounterLevel instance);
    partial void DeleteGoods_ByEncounterLevel(Goods_ByEncounterLevel instance);
    partial void InsertItems_ByEncounterLevel(Items_ByEncounterLevel instance);
    partial void UpdateItems_ByEncounterLevel(Items_ByEncounterLevel instance);
    partial void DeleteItems_ByEncounterLevel(Items_ByEncounterLevel instance);
    partial void InsertCoins_ByEncounterLevel(Coins_ByEncounterLevel instance);
    partial void UpdateCoins_ByEncounterLevel(Coins_ByEncounterLevel instance);
    partial void DeleteCoins_ByEncounterLevel(Coins_ByEncounterLevel instance);
    partial void InsertMundane_Item(Mundane_Item instance);
    partial void UpdateMundane_Item(Mundane_Item instance);
    partial void DeleteMundane_Item(Mundane_Item instance);
    partial void InsertMundane_ItemAlchemical(Mundane_ItemAlchemical instance);
    partial void UpdateMundane_ItemAlchemical(Mundane_ItemAlchemical instance);
    partial void DeleteMundane_ItemAlchemical(Mundane_ItemAlchemical instance);
    partial void InsertMundane_ItemArmor(Mundane_ItemArmor instance);
    partial void UpdateMundane_ItemArmor(Mundane_ItemArmor instance);
    partial void DeleteMundane_ItemArmor(Mundane_ItemArmor instance);
    partial void InsertMundane_ItemToolGear(Mundane_ItemToolGear instance);
    partial void UpdateMundane_ItemToolGear(Mundane_ItemToolGear instance);
    partial void DeleteMundane_ItemToolGear(Mundane_ItemToolGear instance);
    partial void InsertMundane_ItemWeaponType(Mundane_ItemWeaponType instance);
    partial void UpdateMundane_ItemWeaponType(Mundane_ItemWeaponType instance);
    partial void DeleteMundane_ItemWeaponType(Mundane_ItemWeaponType instance);
    partial void InsertMundane_ItemArmorDarkwood(Mundane_ItemArmorDarkwood instance);
    partial void UpdateMundane_ItemArmorDarkwood(Mundane_ItemArmorDarkwood instance);
    partial void DeleteMundane_ItemArmorDarkwood(Mundane_ItemArmorDarkwood instance);
    partial void InsertMundane_ItemArmorMasterworkShield(Mundane_ItemArmorMasterworkShield instance);
    partial void UpdateMundane_ItemArmorMasterworkShield(Mundane_ItemArmorMasterworkShield instance);
    partial void DeleteMundane_ItemArmorMasterworkShield(Mundane_ItemArmorMasterworkShield instance);
    partial void InsertMagic_CommonMeleeWeapon(Magic_CommonMeleeWeapon instance);
    partial void UpdateMagic_CommonMeleeWeapon(Magic_CommonMeleeWeapon instance);
    partial void DeleteMagic_CommonMeleeWeapon(Magic_CommonMeleeWeapon instance);
    partial void InsertMagic_CommonRangedWeapon(Magic_CommonRangedWeapon instance);
    partial void UpdateMagic_CommonRangedWeapon(Magic_CommonRangedWeapon instance);
    partial void DeleteMagic_CommonRangedWeapon(Magic_CommonRangedWeapon instance);
    partial void InsertMagic_UncommonWeapon(Magic_UncommonWeapon instance);
    partial void UpdateMagic_UncommonWeapon(Magic_UncommonWeapon instance);
    partial void DeleteMagic_UncommonWeapon(Magic_UncommonWeapon instance);
    partial void InsertMagic_Item(Magic_Item instance);
    partial void UpdateMagic_Item(Magic_Item instance);
    partial void DeleteMagic_Item(Magic_Item instance);
    partial void InsertMagic_ArmorSpecialAbility(Magic_ArmorSpecialAbility instance);
    partial void UpdateMagic_ArmorSpecialAbility(Magic_ArmorSpecialAbility instance);
    partial void DeleteMagic_ArmorSpecialAbility(Magic_ArmorSpecialAbility instance);
    partial void InsertMagic_ArmorType(Magic_ArmorType instance);
    partial void UpdateMagic_ArmorType(Magic_ArmorType instance);
    partial void DeleteMagic_ArmorType(Magic_ArmorType instance);
    partial void InsertMagic_ShieldSpecialAbility(Magic_ShieldSpecialAbility instance);
    partial void UpdateMagic_ShieldSpecialAbility(Magic_ShieldSpecialAbility instance);
    partial void DeleteMagic_ShieldSpecialAbility(Magic_ShieldSpecialAbility instance);
    partial void InsertMagic_SpecifcArmor(Magic_SpecifcArmor instance);
    partial void UpdateMagic_SpecifcArmor(Magic_SpecifcArmor instance);
    partial void DeleteMagic_SpecifcArmor(Magic_SpecifcArmor instance);
    partial void InsertMagic_SpecificShield(Magic_SpecificShield instance);
    partial void UpdateMagic_SpecificShield(Magic_SpecificShield instance);
    partial void DeleteMagic_SpecificShield(Magic_SpecificShield instance);
    partial void InsertMagic_ArmorShield(Magic_ArmorShield instance);
    partial void UpdateMagic_ArmorShield(Magic_ArmorShield instance);
    partial void DeleteMagic_ArmorShield(Magic_ArmorShield instance);
    partial void InsertMagic_ShieldType(Magic_ShieldType instance);
    partial void UpdateMagic_ShieldType(Magic_ShieldType instance);
    partial void DeleteMagic_ShieldType(Magic_ShieldType instance);
    #endregion
		
		public TreasureDataContext() : 
				base(global::YatesMorrison.RolePlay.D20.Past.Properties.Settings.Default.YMS_RPG_TREASUREConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TreasureDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TreasureDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TreasureDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TreasureDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Goods_ArtObject> Goods_ArtObjects
		{
			get
			{
				return this.GetTable<Goods_ArtObject>();
			}
		}
		
		public System.Data.Linq.Table<Goods_ArtObjectText> Goods_ArtObjectTexts
		{
			get
			{
				return this.GetTable<Goods_ArtObjectText>();
			}
		}
		
		public System.Data.Linq.Table<Goods_Gem> Goods_Gems
		{
			get
			{
				return this.GetTable<Goods_Gem>();
			}
		}
		
		public System.Data.Linq.Table<Goods_GemText> Goods_GemTexts
		{
			get
			{
				return this.GetTable<Goods_GemText>();
			}
		}
		
		public System.Data.Linq.Table<Goods_ByEncounterLevel> Goods_ByEncounterLevels
		{
			get
			{
				return this.GetTable<Goods_ByEncounterLevel>();
			}
		}
		
		public System.Data.Linq.Table<Items_ByEncounterLevel> Items_ByEncounterLevels
		{
			get
			{
				return this.GetTable<Items_ByEncounterLevel>();
			}
		}
		
		public System.Data.Linq.Table<Coins_ByEncounterLevel> Coins_ByEncounterLevels
		{
			get
			{
				return this.GetTable<Coins_ByEncounterLevel>();
			}
		}
		
		public System.Data.Linq.Table<Mundane_Item> Mundane_Items
		{
			get
			{
				return this.GetTable<Mundane_Item>();
			}
		}
		
		public System.Data.Linq.Table<Mundane_ItemAlchemical> Mundane_ItemAlchemicals
		{
			get
			{
				return this.GetTable<Mundane_ItemAlchemical>();
			}
		}
		
		public System.Data.Linq.Table<Mundane_ItemArmor> Mundane_ItemArmors
		{
			get
			{
				return this.GetTable<Mundane_ItemArmor>();
			}
		}
		
		public System.Data.Linq.Table<Mundane_ItemToolGear> Mundane_ItemToolGears
		{
			get
			{
				return this.GetTable<Mundane_ItemToolGear>();
			}
		}
		
		public System.Data.Linq.Table<Mundane_ItemWeaponType> Mundane_ItemWeaponTypes
		{
			get
			{
				return this.GetTable<Mundane_ItemWeaponType>();
			}
		}
		
		public System.Data.Linq.Table<Mundane_ItemArmorDarkwood> Mundane_ItemArmorDarkwoods
		{
			get
			{
				return this.GetTable<Mundane_ItemArmorDarkwood>();
			}
		}
		
		public System.Data.Linq.Table<Mundane_ItemArmorMasterworkShield> Mundane_ItemArmorMasterworkShields
		{
			get
			{
				return this.GetTable<Mundane_ItemArmorMasterworkShield>();
			}
		}
		
		public System.Data.Linq.Table<Magic_CommonMeleeWeapon> Magic_CommonMeleeWeapons
		{
			get
			{
				return this.GetTable<Magic_CommonMeleeWeapon>();
			}
		}
		
		public System.Data.Linq.Table<Magic_CommonRangedWeapon> Magic_CommonRangedWeapons
		{
			get
			{
				return this.GetTable<Magic_CommonRangedWeapon>();
			}
		}
		
		public System.Data.Linq.Table<Magic_UncommonWeapon> Magic_UncommonWeapons
		{
			get
			{
				return this.GetTable<Magic_UncommonWeapon>();
			}
		}
		
		public System.Data.Linq.Table<Magic_Item> Magic_Items
		{
			get
			{
				return this.GetTable<Magic_Item>();
			}
		}
		
		public System.Data.Linq.Table<Magic_ArmorSpecialAbility> Magic_ArmorSpecialAbilities
		{
			get
			{
				return this.GetTable<Magic_ArmorSpecialAbility>();
			}
		}
		
		public System.Data.Linq.Table<Magic_ArmorType> Magic_ArmorTypes
		{
			get
			{
				return this.GetTable<Magic_ArmorType>();
			}
		}
		
		public System.Data.Linq.Table<Magic_ShieldSpecialAbility> Magic_ShieldSpecialAbilities
		{
			get
			{
				return this.GetTable<Magic_ShieldSpecialAbility>();
			}
		}
		
		public System.Data.Linq.Table<Magic_SpecifcArmor> Magic_SpecifcArmors
		{
			get
			{
				return this.GetTable<Magic_SpecifcArmor>();
			}
		}
		
		public System.Data.Linq.Table<Magic_SpecificShield> Magic_SpecificShields
		{
			get
			{
				return this.GetTable<Magic_SpecificShield>();
			}
		}
		
		public System.Data.Linq.Table<Magic_ArmorShield> Magic_ArmorShields
		{
			get
			{
				return this.GetTable<Magic_ArmorShield>();
			}
		}
		
		public System.Data.Linq.Table<Magic_ShieldType> Magic_ShieldTypes
		{
			get
			{
				return this.GetTable<Magic_ShieldType>();
			}
		}
	}
	
	[Table(Name="dbo.Goods_ArtObject")]
	public partial class Goods_ArtObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArtObjectID;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private System.Nullable<int> _DiceNumber;
		
		private System.Nullable<int> _DiceRange;
		
		private System.Nullable<int> _Multiplier;
		
		private EntitySet<Goods_ArtObjectText> _Goods_ArtObjectTexts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArtObjectIDChanging(int value);
    partial void OnArtObjectIDChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDiceNumberChanging(System.Nullable<int> value);
    partial void OnDiceNumberChanged();
    partial void OnDiceRangeChanging(System.Nullable<int> value);
    partial void OnDiceRangeChanged();
    partial void OnMultiplierChanging(System.Nullable<int> value);
    partial void OnMultiplierChanged();
    #endregion
		
		public Goods_ArtObject()
		{
			this._Goods_ArtObjectTexts = new EntitySet<Goods_ArtObjectText>(new Action<Goods_ArtObjectText>(this.attach_Goods_ArtObjectTexts), new Action<Goods_ArtObjectText>(this.detach_Goods_ArtObjectTexts));
			OnCreated();
		}
		
		[Column(Storage="_ArtObjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArtObjectID
		{
			get
			{
				return this._ArtObjectID;
			}
			set
			{
				if ((this._ArtObjectID != value))
				{
					this.OnArtObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ArtObjectID = value;
					this.SendPropertyChanged("ArtObjectID");
					this.OnArtObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_DiceNumber", DbType="Int")]
		public System.Nullable<int> DiceNumber
		{
			get
			{
				return this._DiceNumber;
			}
			set
			{
				if ((this._DiceNumber != value))
				{
					this.OnDiceNumberChanging(value);
					this.SendPropertyChanging();
					this._DiceNumber = value;
					this.SendPropertyChanged("DiceNumber");
					this.OnDiceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_DiceRange", DbType="Int")]
		public System.Nullable<int> DiceRange
		{
			get
			{
				return this._DiceRange;
			}
			set
			{
				if ((this._DiceRange != value))
				{
					this.OnDiceRangeChanging(value);
					this.SendPropertyChanging();
					this._DiceRange = value;
					this.SendPropertyChanged("DiceRange");
					this.OnDiceRangeChanged();
				}
			}
		}
		
		[Column(Storage="_Multiplier", DbType="Int")]
		public System.Nullable<int> Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		[Association(Name="Goods_ArtObject_Goods_ArtObjectText", Storage="_Goods_ArtObjectTexts", OtherKey="ArtObjectFK")]
		public EntitySet<Goods_ArtObjectText> Goods_ArtObjectTexts
		{
			get
			{
				return this._Goods_ArtObjectTexts;
			}
			set
			{
				this._Goods_ArtObjectTexts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Goods_ArtObjectTexts(Goods_ArtObjectText entity)
		{
			this.SendPropertyChanging();
			entity.Goods_ArtObject = this;
		}
		
		private void detach_Goods_ArtObjectTexts(Goods_ArtObjectText entity)
		{
			this.SendPropertyChanging();
			entity.Goods_ArtObject = null;
		}
	}
	
	[Table(Name="dbo.Goods_ArtObjectText")]
	public partial class Goods_ArtObjectText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArtObjectFK;
		
		private string _ArtObjectText;
		
		private EntityRef<Goods_ArtObject> _Goods_ArtObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArtObjectFKChanging(int value);
    partial void OnArtObjectFKChanged();
    partial void OnArtObjectTextChanging(string value);
    partial void OnArtObjectTextChanged();
    #endregion
		
		public Goods_ArtObjectText()
		{
			this._Goods_ArtObject = default(EntityRef<Goods_ArtObject>);
			OnCreated();
		}
		
		[Column(Storage="_ArtObjectFK", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArtObjectFK
		{
			get
			{
				return this._ArtObjectFK;
			}
			set
			{
				if ((this._ArtObjectFK != value))
				{
					if (this._Goods_ArtObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtObjectFKChanging(value);
					this.SendPropertyChanging();
					this._ArtObjectFK = value;
					this.SendPropertyChanged("ArtObjectFK");
					this.OnArtObjectFKChanged();
				}
			}
		}
		
		[Column(Storage="_ArtObjectText", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ArtObjectText
		{
			get
			{
				return this._ArtObjectText;
			}
			set
			{
				if ((this._ArtObjectText != value))
				{
					this.OnArtObjectTextChanging(value);
					this.SendPropertyChanging();
					this._ArtObjectText = value;
					this.SendPropertyChanged("ArtObjectText");
					this.OnArtObjectTextChanged();
				}
			}
		}
		
		[Association(Name="Goods_ArtObject_Goods_ArtObjectText", Storage="_Goods_ArtObject", ThisKey="ArtObjectFK", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Goods_ArtObject Goods_ArtObject
		{
			get
			{
				return this._Goods_ArtObject.Entity;
			}
			set
			{
				Goods_ArtObject previousValue = this._Goods_ArtObject.Entity;
				if (((previousValue != value) 
							|| (this._Goods_ArtObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goods_ArtObject.Entity = null;
						previousValue.Goods_ArtObjectTexts.Remove(this);
					}
					this._Goods_ArtObject.Entity = value;
					if ((value != null))
					{
						value.Goods_ArtObjectTexts.Add(this);
						this._ArtObjectFK = value.ArtObjectID;
					}
					else
					{
						this._ArtObjectFK = default(int);
					}
					this.SendPropertyChanged("Goods_ArtObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Goods_Gem")]
	public partial class Goods_Gem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GemID;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private System.Nullable<int> _DiceNumber;
		
		private System.Nullable<int> _DiceRange;
		
		private System.Nullable<int> _Multiplier;
		
		private EntitySet<Goods_GemText> _Goods_GemTexts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGemIDChanging(int value);
    partial void OnGemIDChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDiceNumberChanging(System.Nullable<int> value);
    partial void OnDiceNumberChanged();
    partial void OnDiceRangeChanging(System.Nullable<int> value);
    partial void OnDiceRangeChanged();
    partial void OnMultiplierChanging(System.Nullable<int> value);
    partial void OnMultiplierChanged();
    #endregion
		
		public Goods_Gem()
		{
			this._Goods_GemTexts = new EntitySet<Goods_GemText>(new Action<Goods_GemText>(this.attach_Goods_GemTexts), new Action<Goods_GemText>(this.detach_Goods_GemTexts));
			OnCreated();
		}
		
		[Column(Storage="_GemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GemID
		{
			get
			{
				return this._GemID;
			}
			set
			{
				if ((this._GemID != value))
				{
					this.OnGemIDChanging(value);
					this.SendPropertyChanging();
					this._GemID = value;
					this.SendPropertyChanged("GemID");
					this.OnGemIDChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_DiceNumber", DbType="Int")]
		public System.Nullable<int> DiceNumber
		{
			get
			{
				return this._DiceNumber;
			}
			set
			{
				if ((this._DiceNumber != value))
				{
					this.OnDiceNumberChanging(value);
					this.SendPropertyChanging();
					this._DiceNumber = value;
					this.SendPropertyChanged("DiceNumber");
					this.OnDiceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_DiceRange", DbType="Int")]
		public System.Nullable<int> DiceRange
		{
			get
			{
				return this._DiceRange;
			}
			set
			{
				if ((this._DiceRange != value))
				{
					this.OnDiceRangeChanging(value);
					this.SendPropertyChanging();
					this._DiceRange = value;
					this.SendPropertyChanged("DiceRange");
					this.OnDiceRangeChanged();
				}
			}
		}
		
		[Column(Storage="_Multiplier", DbType="Int")]
		public System.Nullable<int> Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		[Association(Name="Goods_Gem_Goods_GemText", Storage="_Goods_GemTexts", OtherKey="GemFK")]
		public EntitySet<Goods_GemText> Goods_GemTexts
		{
			get
			{
				return this._Goods_GemTexts;
			}
			set
			{
				this._Goods_GemTexts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Goods_GemTexts(Goods_GemText entity)
		{
			this.SendPropertyChanging();
			entity.Goods_Gem = this;
		}
		
		private void detach_Goods_GemTexts(Goods_GemText entity)
		{
			this.SendPropertyChanging();
			entity.Goods_Gem = null;
		}
	}
	
	[Table(Name="dbo.Goods_GemText")]
	public partial class Goods_GemText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GemFK;
		
		private string _Text;
		
		private EntityRef<Goods_Gem> _Goods_Gem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGemFKChanging(int value);
    partial void OnGemFKChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Goods_GemText()
		{
			this._Goods_Gem = default(EntityRef<Goods_Gem>);
			OnCreated();
		}
		
		[Column(Storage="_GemFK", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GemFK
		{
			get
			{
				return this._GemFK;
			}
			set
			{
				if ((this._GemFK != value))
				{
					if (this._Goods_Gem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGemFKChanging(value);
					this.SendPropertyChanging();
					this._GemFK = value;
					this.SendPropertyChanged("GemFK");
					this.OnGemFKChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="Goods_Gem_Goods_GemText", Storage="_Goods_Gem", ThisKey="GemFK", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Goods_Gem Goods_Gem
		{
			get
			{
				return this._Goods_Gem.Entity;
			}
			set
			{
				Goods_Gem previousValue = this._Goods_Gem.Entity;
				if (((previousValue != value) 
							|| (this._Goods_Gem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goods_Gem.Entity = null;
						previousValue.Goods_GemTexts.Remove(this);
					}
					this._Goods_Gem.Entity = value;
					if ((value != null))
					{
						value.Goods_GemTexts.Add(this);
						this._GemFK = value.GemID;
					}
					else
					{
						this._GemFK = default(int);
					}
					this.SendPropertyChanged("Goods_Gem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Goods_ByEncounterLevel")]
	public partial class Goods_ByEncounterLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EncounterLevel;
		
		private int _GoodsType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private System.Nullable<int> _DiceNumber;
		
		private System.Nullable<int> _DiceRange;
		
		private System.Nullable<int> _Multiplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEncounterLevelChanging(int value);
    partial void OnEncounterLevelChanged();
    partial void OnGoodsTypeChanging(int value);
    partial void OnGoodsTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDiceNumberChanging(System.Nullable<int> value);
    partial void OnDiceNumberChanged();
    partial void OnDiceRangeChanging(System.Nullable<int> value);
    partial void OnDiceRangeChanged();
    partial void OnMultiplierChanging(System.Nullable<int> value);
    partial void OnMultiplierChanged();
    #endregion
		
		public Goods_ByEncounterLevel()
		{
			OnCreated();
		}
		
		[Column(Storage="_EncounterLevel", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EncounterLevel
		{
			get
			{
				return this._EncounterLevel;
			}
			set
			{
				if ((this._EncounterLevel != value))
				{
					this.OnEncounterLevelChanging(value);
					this.SendPropertyChanging();
					this._EncounterLevel = value;
					this.SendPropertyChanged("EncounterLevel");
					this.OnEncounterLevelChanged();
				}
			}
		}
		
		[Column(Storage="_GoodsType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GoodsType
		{
			get
			{
				return this._GoodsType;
			}
			set
			{
				if ((this._GoodsType != value))
				{
					this.OnGoodsTypeChanging(value);
					this.SendPropertyChanging();
					this._GoodsType = value;
					this.SendPropertyChanged("GoodsType");
					this.OnGoodsTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_DiceNumber", DbType="Int")]
		public System.Nullable<int> DiceNumber
		{
			get
			{
				return this._DiceNumber;
			}
			set
			{
				if ((this._DiceNumber != value))
				{
					this.OnDiceNumberChanging(value);
					this.SendPropertyChanging();
					this._DiceNumber = value;
					this.SendPropertyChanged("DiceNumber");
					this.OnDiceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_DiceRange", DbType="Int")]
		public System.Nullable<int> DiceRange
		{
			get
			{
				return this._DiceRange;
			}
			set
			{
				if ((this._DiceRange != value))
				{
					this.OnDiceRangeChanging(value);
					this.SendPropertyChanging();
					this._DiceRange = value;
					this.SendPropertyChanged("DiceRange");
					this.OnDiceRangeChanged();
				}
			}
		}
		
		[Column(Storage="_Multiplier", DbType="Int")]
		public System.Nullable<int> Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Items_ByEncounterLevel")]
	public partial class Items_ByEncounterLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EncounterLevel;
		
		private int _ItemsType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private System.Nullable<int> _DiceNumber;
		
		private System.Nullable<int> _DiceRange;
		
		private System.Nullable<int> _Multiplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEncounterLevelChanging(int value);
    partial void OnEncounterLevelChanged();
    partial void OnItemsTypeChanging(int value);
    partial void OnItemsTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDiceNumberChanging(System.Nullable<int> value);
    partial void OnDiceNumberChanged();
    partial void OnDiceRangeChanging(System.Nullable<int> value);
    partial void OnDiceRangeChanged();
    partial void OnMultiplierChanging(System.Nullable<int> value);
    partial void OnMultiplierChanged();
    #endregion
		
		public Items_ByEncounterLevel()
		{
			OnCreated();
		}
		
		[Column(Storage="_EncounterLevel", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EncounterLevel
		{
			get
			{
				return this._EncounterLevel;
			}
			set
			{
				if ((this._EncounterLevel != value))
				{
					this.OnEncounterLevelChanging(value);
					this.SendPropertyChanging();
					this._EncounterLevel = value;
					this.SendPropertyChanged("EncounterLevel");
					this.OnEncounterLevelChanged();
				}
			}
		}
		
		[Column(Storage="_ItemsType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemsType
		{
			get
			{
				return this._ItemsType;
			}
			set
			{
				if ((this._ItemsType != value))
				{
					this.OnItemsTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemsType = value;
					this.SendPropertyChanged("ItemsType");
					this.OnItemsTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_DiceNumber", DbType="Int")]
		public System.Nullable<int> DiceNumber
		{
			get
			{
				return this._DiceNumber;
			}
			set
			{
				if ((this._DiceNumber != value))
				{
					this.OnDiceNumberChanging(value);
					this.SendPropertyChanging();
					this._DiceNumber = value;
					this.SendPropertyChanged("DiceNumber");
					this.OnDiceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_DiceRange", DbType="Int")]
		public System.Nullable<int> DiceRange
		{
			get
			{
				return this._DiceRange;
			}
			set
			{
				if ((this._DiceRange != value))
				{
					this.OnDiceRangeChanging(value);
					this.SendPropertyChanging();
					this._DiceRange = value;
					this.SendPropertyChanged("DiceRange");
					this.OnDiceRangeChanged();
				}
			}
		}
		
		[Column(Storage="_Multiplier", DbType="Int")]
		public System.Nullable<int> Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Coins_ByEncounterLevel")]
	public partial class Coins_ByEncounterLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EncounterLevel;
		
		private int _CoinType;
		
		private int _Low;
		
		private int _High;
		
		private System.Nullable<int> _DiceNumber;
		
		private System.Nullable<int> _DiceRange;
		
		private System.Nullable<int> _Multiplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEncounterLevelChanging(int value);
    partial void OnEncounterLevelChanged();
    partial void OnCoinTypeChanging(int value);
    partial void OnCoinTypeChanged();
    partial void OnLowChanging(int value);
    partial void OnLowChanged();
    partial void OnHighChanging(int value);
    partial void OnHighChanged();
    partial void OnDiceNumberChanging(System.Nullable<int> value);
    partial void OnDiceNumberChanged();
    partial void OnDiceRangeChanging(System.Nullable<int> value);
    partial void OnDiceRangeChanged();
    partial void OnMultiplierChanging(System.Nullable<int> value);
    partial void OnMultiplierChanged();
    #endregion
		
		public Coins_ByEncounterLevel()
		{
			OnCreated();
		}
		
		[Column(Storage="_EncounterLevel", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EncounterLevel
		{
			get
			{
				return this._EncounterLevel;
			}
			set
			{
				if ((this._EncounterLevel != value))
				{
					this.OnEncounterLevelChanging(value);
					this.SendPropertyChanging();
					this._EncounterLevel = value;
					this.SendPropertyChanged("EncounterLevel");
					this.OnEncounterLevelChanged();
				}
			}
		}
		
		[Column(Storage="_CoinType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CoinType
		{
			get
			{
				return this._CoinType;
			}
			set
			{
				if ((this._CoinType != value))
				{
					this.OnCoinTypeChanging(value);
					this.SendPropertyChanging();
					this._CoinType = value;
					this.SendPropertyChanged("CoinType");
					this.OnCoinTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int NOT NULL")]
		public int Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int NOT NULL")]
		public int High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_DiceNumber", DbType="Int")]
		public System.Nullable<int> DiceNumber
		{
			get
			{
				return this._DiceNumber;
			}
			set
			{
				if ((this._DiceNumber != value))
				{
					this.OnDiceNumberChanging(value);
					this.SendPropertyChanging();
					this._DiceNumber = value;
					this.SendPropertyChanged("DiceNumber");
					this.OnDiceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_DiceRange", DbType="Int")]
		public System.Nullable<int> DiceRange
		{
			get
			{
				return this._DiceRange;
			}
			set
			{
				if ((this._DiceRange != value))
				{
					this.OnDiceRangeChanging(value);
					this.SendPropertyChanging();
					this._DiceRange = value;
					this.SendPropertyChanged("DiceRange");
					this.OnDiceRangeChanged();
				}
			}
		}
		
		[Column(Storage="_Multiplier", DbType="Int")]
		public System.Nullable<int> Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Mundane_Item")]
	public partial class Mundane_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MundaneItemType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMundaneItemTypeChanging(int value);
    partial void OnMundaneItemTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Mundane_Item()
		{
			OnCreated();
		}
		
		[Column(Storage="_MundaneItemType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MundaneItemType
		{
			get
			{
				return this._MundaneItemType;
			}
			set
			{
				if ((this._MundaneItemType != value))
				{
					this.OnMundaneItemTypeChanging(value);
					this.SendPropertyChanging();
					this._MundaneItemType = value;
					this.SendPropertyChanged("MundaneItemType");
					this.OnMundaneItemTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Mundane_ItemAlchemical")]
	public partial class Mundane_ItemAlchemical : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlchemicalItemType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _DiceNumber;
		
		private System.Nullable<int> _DiceRange;
		
		private System.Nullable<int> _MarketPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlchemicalItemTypeChanging(int value);
    partial void OnAlchemicalItemTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDiceNumberChanging(System.Nullable<int> value);
    partial void OnDiceNumberChanged();
    partial void OnDiceRangeChanging(System.Nullable<int> value);
    partial void OnDiceRangeChanged();
    partial void OnMarketPriceChanging(System.Nullable<int> value);
    partial void OnMarketPriceChanged();
    #endregion
		
		public Mundane_ItemAlchemical()
		{
			OnCreated();
		}
		
		[Column(Storage="_AlchemicalItemType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlchemicalItemType
		{
			get
			{
				return this._AlchemicalItemType;
			}
			set
			{
				if ((this._AlchemicalItemType != value))
				{
					this.OnAlchemicalItemTypeChanging(value);
					this.SendPropertyChanging();
					this._AlchemicalItemType = value;
					this.SendPropertyChanged("AlchemicalItemType");
					this.OnAlchemicalItemTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_DiceNumber", DbType="Int")]
		public System.Nullable<int> DiceNumber
		{
			get
			{
				return this._DiceNumber;
			}
			set
			{
				if ((this._DiceNumber != value))
				{
					this.OnDiceNumberChanging(value);
					this.SendPropertyChanging();
					this._DiceNumber = value;
					this.SendPropertyChanged("DiceNumber");
					this.OnDiceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_DiceRange", DbType="Int")]
		public System.Nullable<int> DiceRange
		{
			get
			{
				return this._DiceRange;
			}
			set
			{
				if ((this._DiceRange != value))
				{
					this.OnDiceRangeChanging(value);
					this.SendPropertyChanging();
					this._DiceRange = value;
					this.SendPropertyChanged("DiceRange");
					this.OnDiceRangeChanged();
				}
			}
		}
		
		[Column(Storage="_MarketPrice", DbType="Int")]
		public System.Nullable<int> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Mundane_ItemArmor")]
	public partial class Mundane_ItemArmor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArmorType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _MarketPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArmorTypeChanging(int value);
    partial void OnArmorTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMarketPriceChanging(System.Nullable<int> value);
    partial void OnMarketPriceChanged();
    #endregion
		
		public Mundane_ItemArmor()
		{
			OnCreated();
		}
		
		[Column(Storage="_ArmorType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArmorType
		{
			get
			{
				return this._ArmorType;
			}
			set
			{
				if ((this._ArmorType != value))
				{
					this.OnArmorTypeChanging(value);
					this.SendPropertyChanging();
					this._ArmorType = value;
					this.SendPropertyChanged("ArmorType");
					this.OnArmorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MarketPrice", DbType="Int")]
		public System.Nullable<int> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Mundane_ItemToolGear")]
	public partial class Mundane_ItemToolGear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ToolGearType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _MarketPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolGearTypeChanging(int value);
    partial void OnToolGearTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMarketPriceChanging(System.Nullable<int> value);
    partial void OnMarketPriceChanged();
    #endregion
		
		public Mundane_ItemToolGear()
		{
			OnCreated();
		}
		
		[Column(Storage="_ToolGearType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ToolGearType
		{
			get
			{
				return this._ToolGearType;
			}
			set
			{
				if ((this._ToolGearType != value))
				{
					this.OnToolGearTypeChanging(value);
					this.SendPropertyChanging();
					this._ToolGearType = value;
					this.SendPropertyChanged("ToolGearType");
					this.OnToolGearTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MarketPrice", DbType="Int")]
		public System.Nullable<int> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Mundane_ItemWeaponType")]
	public partial class Mundane_ItemWeaponType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WeaponType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWeaponTypeChanging(int value);
    partial void OnWeaponTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Mundane_ItemWeaponType()
		{
			OnCreated();
		}
		
		[Column(Storage="_WeaponType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WeaponType
		{
			get
			{
				return this._WeaponType;
			}
			set
			{
				if ((this._WeaponType != value))
				{
					this.OnWeaponTypeChanging(value);
					this.SendPropertyChanging();
					this._WeaponType = value;
					this.SendPropertyChanged("WeaponType");
					this.OnWeaponTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Mundane_ItemArmorDarkwood")]
	public partial class Mundane_ItemArmorDarkwood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DarkwoodType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _MarketPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDarkwoodTypeChanging(int value);
    partial void OnDarkwoodTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMarketPriceChanging(System.Nullable<int> value);
    partial void OnMarketPriceChanged();
    #endregion
		
		public Mundane_ItemArmorDarkwood()
		{
			OnCreated();
		}
		
		[Column(Storage="_DarkwoodType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DarkwoodType
		{
			get
			{
				return this._DarkwoodType;
			}
			set
			{
				if ((this._DarkwoodType != value))
				{
					this.OnDarkwoodTypeChanging(value);
					this.SendPropertyChanging();
					this._DarkwoodType = value;
					this.SendPropertyChanged("DarkwoodType");
					this.OnDarkwoodTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MarketPrice", DbType="Int")]
		public System.Nullable<int> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Mundane_ItemArmorMasterworkShield")]
	public partial class Mundane_ItemArmorMasterworkShield : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MasterworkShieldType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _MarketPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMasterworkShieldTypeChanging(int value);
    partial void OnMasterworkShieldTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMarketPriceChanging(System.Nullable<int> value);
    partial void OnMarketPriceChanged();
    #endregion
		
		public Mundane_ItemArmorMasterworkShield()
		{
			OnCreated();
		}
		
		[Column(Storage="_MasterworkShieldType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MasterworkShieldType
		{
			get
			{
				return this._MasterworkShieldType;
			}
			set
			{
				if ((this._MasterworkShieldType != value))
				{
					this.OnMasterworkShieldTypeChanging(value);
					this.SendPropertyChanging();
					this._MasterworkShieldType = value;
					this.SendPropertyChanged("MasterworkShieldType");
					this.OnMasterworkShieldTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MarketPrice", DbType="Int")]
		public System.Nullable<int> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_CommonMeleeWeapon")]
	public partial class Magic_CommonMeleeWeapon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicCommonMeleeWeaponType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _WeaponCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicCommonMeleeWeaponTypeChanging(int value);
    partial void OnMagicCommonMeleeWeaponTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWeaponCostChanging(System.Nullable<int> value);
    partial void OnWeaponCostChanged();
    #endregion
		
		public Magic_CommonMeleeWeapon()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicCommonMeleeWeaponType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicCommonMeleeWeaponType
		{
			get
			{
				return this._MagicCommonMeleeWeaponType;
			}
			set
			{
				if ((this._MagicCommonMeleeWeaponType != value))
				{
					this.OnMagicCommonMeleeWeaponTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicCommonMeleeWeaponType = value;
					this.SendPropertyChanged("MagicCommonMeleeWeaponType");
					this.OnMagicCommonMeleeWeaponTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_WeaponCost", DbType="Int")]
		public System.Nullable<int> WeaponCost
		{
			get
			{
				return this._WeaponCost;
			}
			set
			{
				if ((this._WeaponCost != value))
				{
					this.OnWeaponCostChanging(value);
					this.SendPropertyChanging();
					this._WeaponCost = value;
					this.SendPropertyChanged("WeaponCost");
					this.OnWeaponCostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_CommonRangedWeapon")]
	public partial class Magic_CommonRangedWeapon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicCommonRangedWeaponType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _WeaponCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicCommonRangedWeaponTypeChanging(int value);
    partial void OnMagicCommonRangedWeaponTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWeaponCostChanging(System.Nullable<int> value);
    partial void OnWeaponCostChanged();
    #endregion
		
		public Magic_CommonRangedWeapon()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicCommonRangedWeaponType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicCommonRangedWeaponType
		{
			get
			{
				return this._MagicCommonRangedWeaponType;
			}
			set
			{
				if ((this._MagicCommonRangedWeaponType != value))
				{
					this.OnMagicCommonRangedWeaponTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicCommonRangedWeaponType = value;
					this.SendPropertyChanged("MagicCommonRangedWeaponType");
					this.OnMagicCommonRangedWeaponTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_WeaponCost", DbType="Int")]
		public System.Nullable<int> WeaponCost
		{
			get
			{
				return this._WeaponCost;
			}
			set
			{
				if ((this._WeaponCost != value))
				{
					this.OnWeaponCostChanging(value);
					this.SendPropertyChanging();
					this._WeaponCost = value;
					this.SendPropertyChanged("WeaponCost");
					this.OnWeaponCostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_UncommonWeapon")]
	public partial class Magic_UncommonWeapon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicUncommonWeaponType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _WeaponCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicUncommonWeaponTypeChanging(int value);
    partial void OnMagicUncommonWeaponTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWeaponCostChanging(System.Nullable<int> value);
    partial void OnWeaponCostChanged();
    #endregion
		
		public Magic_UncommonWeapon()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicUncommonWeaponType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicUncommonWeaponType
		{
			get
			{
				return this._MagicUncommonWeaponType;
			}
			set
			{
				if ((this._MagicUncommonWeaponType != value))
				{
					this.OnMagicUncommonWeaponTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicUncommonWeaponType = value;
					this.SendPropertyChanged("MagicUncommonWeaponType");
					this.OnMagicUncommonWeaponTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_WeaponCost", DbType="Int")]
		public System.Nullable<int> WeaponCost
		{
			get
			{
				return this._WeaponCost;
			}
			set
			{
				if ((this._WeaponCost != value))
				{
					this.OnWeaponCostChanging(value);
					this.SendPropertyChanging();
					this._WeaponCost = value;
					this.SendPropertyChanged("WeaponCost");
					this.OnWeaponCostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_Item")]
	public partial class Magic_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicItemType;
		
		private System.Nullable<int> _MinorLow;
		
		private System.Nullable<int> _MinorHigh;
		
		private System.Nullable<int> _MediumLow;
		
		private System.Nullable<int> _MediumHigh;
		
		private System.Nullable<int> _MajorLow;
		
		private System.Nullable<int> _MajorHigh;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicItemTypeChanging(int value);
    partial void OnMagicItemTypeChanged();
    partial void OnMinorLowChanging(System.Nullable<int> value);
    partial void OnMinorLowChanged();
    partial void OnMinorHighChanging(System.Nullable<int> value);
    partial void OnMinorHighChanged();
    partial void OnMediumLowChanging(System.Nullable<int> value);
    partial void OnMediumLowChanged();
    partial void OnMediumHighChanging(System.Nullable<int> value);
    partial void OnMediumHighChanged();
    partial void OnMajorLowChanging(System.Nullable<int> value);
    partial void OnMajorLowChanged();
    partial void OnMajorHighChanging(System.Nullable<int> value);
    partial void OnMajorHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Magic_Item()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicItemType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicItemType
		{
			get
			{
				return this._MagicItemType;
			}
			set
			{
				if ((this._MagicItemType != value))
				{
					this.OnMagicItemTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicItemType = value;
					this.SendPropertyChanged("MagicItemType");
					this.OnMagicItemTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MinorLow", DbType="Int")]
		public System.Nullable<int> MinorLow
		{
			get
			{
				return this._MinorLow;
			}
			set
			{
				if ((this._MinorLow != value))
				{
					this.OnMinorLowChanging(value);
					this.SendPropertyChanging();
					this._MinorLow = value;
					this.SendPropertyChanged("MinorLow");
					this.OnMinorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MinorHigh", DbType="Int")]
		public System.Nullable<int> MinorHigh
		{
			get
			{
				return this._MinorHigh;
			}
			set
			{
				if ((this._MinorHigh != value))
				{
					this.OnMinorHighChanging(value);
					this.SendPropertyChanging();
					this._MinorHigh = value;
					this.SendPropertyChanged("MinorHigh");
					this.OnMinorHighChanged();
				}
			}
		}
		
		[Column(Storage="_MediumLow", DbType="Int")]
		public System.Nullable<int> MediumLow
		{
			get
			{
				return this._MediumLow;
			}
			set
			{
				if ((this._MediumLow != value))
				{
					this.OnMediumLowChanging(value);
					this.SendPropertyChanging();
					this._MediumLow = value;
					this.SendPropertyChanged("MediumLow");
					this.OnMediumLowChanged();
				}
			}
		}
		
		[Column(Storage="_MediumHigh", DbType="Int")]
		public System.Nullable<int> MediumHigh
		{
			get
			{
				return this._MediumHigh;
			}
			set
			{
				if ((this._MediumHigh != value))
				{
					this.OnMediumHighChanging(value);
					this.SendPropertyChanging();
					this._MediumHigh = value;
					this.SendPropertyChanged("MediumHigh");
					this.OnMediumHighChanged();
				}
			}
		}
		
		[Column(Storage="_MajorLow", DbType="Int")]
		public System.Nullable<int> MajorLow
		{
			get
			{
				return this._MajorLow;
			}
			set
			{
				if ((this._MajorLow != value))
				{
					this.OnMajorLowChanging(value);
					this.SendPropertyChanging();
					this._MajorLow = value;
					this.SendPropertyChanged("MajorLow");
					this.OnMajorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MajorHigh", DbType="Int")]
		public System.Nullable<int> MajorHigh
		{
			get
			{
				return this._MajorHigh;
			}
			set
			{
				if ((this._MajorHigh != value))
				{
					this.OnMajorHighChanging(value);
					this.SendPropertyChanging();
					this._MajorHigh = value;
					this.SendPropertyChanged("MajorHigh");
					this.OnMajorHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_ArmorSpecialAbility")]
	public partial class Magic_ArmorSpecialAbility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicArmorSpecialAbilityType;
		
		private System.Nullable<int> _MinorLow;
		
		private System.Nullable<int> _MinorHigh;
		
		private System.Nullable<int> _MediumLow;
		
		private System.Nullable<int> _MediumHigh;
		
		private System.Nullable<int> _MajorLow;
		
		private System.Nullable<int> _MajorHigh;
		
		private string _Description;
		
		private System.Nullable<int> _AddCost;
		
		private System.Nullable<int> _AddModifier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicArmorSpecialAbilityTypeChanging(int value);
    partial void OnMagicArmorSpecialAbilityTypeChanged();
    partial void OnMinorLowChanging(System.Nullable<int> value);
    partial void OnMinorLowChanged();
    partial void OnMinorHighChanging(System.Nullable<int> value);
    partial void OnMinorHighChanged();
    partial void OnMediumLowChanging(System.Nullable<int> value);
    partial void OnMediumLowChanged();
    partial void OnMediumHighChanging(System.Nullable<int> value);
    partial void OnMediumHighChanged();
    partial void OnMajorLowChanging(System.Nullable<int> value);
    partial void OnMajorLowChanged();
    partial void OnMajorHighChanging(System.Nullable<int> value);
    partial void OnMajorHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddCostChanging(System.Nullable<int> value);
    partial void OnAddCostChanged();
    partial void OnAddModifierChanging(System.Nullable<int> value);
    partial void OnAddModifierChanged();
    #endregion
		
		public Magic_ArmorSpecialAbility()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicArmorSpecialAbilityType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicArmorSpecialAbilityType
		{
			get
			{
				return this._MagicArmorSpecialAbilityType;
			}
			set
			{
				if ((this._MagicArmorSpecialAbilityType != value))
				{
					this.OnMagicArmorSpecialAbilityTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicArmorSpecialAbilityType = value;
					this.SendPropertyChanged("MagicArmorSpecialAbilityType");
					this.OnMagicArmorSpecialAbilityTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MinorLow", DbType="Int")]
		public System.Nullable<int> MinorLow
		{
			get
			{
				return this._MinorLow;
			}
			set
			{
				if ((this._MinorLow != value))
				{
					this.OnMinorLowChanging(value);
					this.SendPropertyChanging();
					this._MinorLow = value;
					this.SendPropertyChanged("MinorLow");
					this.OnMinorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MinorHigh", DbType="Int")]
		public System.Nullable<int> MinorHigh
		{
			get
			{
				return this._MinorHigh;
			}
			set
			{
				if ((this._MinorHigh != value))
				{
					this.OnMinorHighChanging(value);
					this.SendPropertyChanging();
					this._MinorHigh = value;
					this.SendPropertyChanged("MinorHigh");
					this.OnMinorHighChanged();
				}
			}
		}
		
		[Column(Storage="_MediumLow", DbType="Int")]
		public System.Nullable<int> MediumLow
		{
			get
			{
				return this._MediumLow;
			}
			set
			{
				if ((this._MediumLow != value))
				{
					this.OnMediumLowChanging(value);
					this.SendPropertyChanging();
					this._MediumLow = value;
					this.SendPropertyChanged("MediumLow");
					this.OnMediumLowChanged();
				}
			}
		}
		
		[Column(Storage="_MediumHigh", DbType="Int")]
		public System.Nullable<int> MediumHigh
		{
			get
			{
				return this._MediumHigh;
			}
			set
			{
				if ((this._MediumHigh != value))
				{
					this.OnMediumHighChanging(value);
					this.SendPropertyChanging();
					this._MediumHigh = value;
					this.SendPropertyChanged("MediumHigh");
					this.OnMediumHighChanged();
				}
			}
		}
		
		[Column(Storage="_MajorLow", DbType="Int")]
		public System.Nullable<int> MajorLow
		{
			get
			{
				return this._MajorLow;
			}
			set
			{
				if ((this._MajorLow != value))
				{
					this.OnMajorLowChanging(value);
					this.SendPropertyChanging();
					this._MajorLow = value;
					this.SendPropertyChanged("MajorLow");
					this.OnMajorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MajorHigh", DbType="Int")]
		public System.Nullable<int> MajorHigh
		{
			get
			{
				return this._MajorHigh;
			}
			set
			{
				if ((this._MajorHigh != value))
				{
					this.OnMajorHighChanging(value);
					this.SendPropertyChanging();
					this._MajorHigh = value;
					this.SendPropertyChanged("MajorHigh");
					this.OnMajorHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_AddCost", DbType="Int")]
		public System.Nullable<int> AddCost
		{
			get
			{
				return this._AddCost;
			}
			set
			{
				if ((this._AddCost != value))
				{
					this.OnAddCostChanging(value);
					this.SendPropertyChanging();
					this._AddCost = value;
					this.SendPropertyChanged("AddCost");
					this.OnAddCostChanged();
				}
			}
		}
		
		[Column(Storage="_AddModifier", DbType="Int")]
		public System.Nullable<int> AddModifier
		{
			get
			{
				return this._AddModifier;
			}
			set
			{
				if ((this._AddModifier != value))
				{
					this.OnAddModifierChanging(value);
					this.SendPropertyChanging();
					this._AddModifier = value;
					this.SendPropertyChanged("AddModifier");
					this.OnAddModifierChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_ArmorType")]
	public partial class Magic_ArmorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicArmorType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _ArmorCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicArmorTypeChanging(int value);
    partial void OnMagicArmorTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnArmorCostChanging(System.Nullable<int> value);
    partial void OnArmorCostChanged();
    #endregion
		
		public Magic_ArmorType()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicArmorType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicArmorType
		{
			get
			{
				return this._MagicArmorType;
			}
			set
			{
				if ((this._MagicArmorType != value))
				{
					this.OnMagicArmorTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicArmorType = value;
					this.SendPropertyChanged("MagicArmorType");
					this.OnMagicArmorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ArmorCost", DbType="Int")]
		public System.Nullable<int> ArmorCost
		{
			get
			{
				return this._ArmorCost;
			}
			set
			{
				if ((this._ArmorCost != value))
				{
					this.OnArmorCostChanging(value);
					this.SendPropertyChanging();
					this._ArmorCost = value;
					this.SendPropertyChanged("ArmorCost");
					this.OnArmorCostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_ShieldSpecialAbility")]
	public partial class Magic_ShieldSpecialAbility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicShieldSpecialAbilityType;
		
		private System.Nullable<int> _MinorLow;
		
		private System.Nullable<int> _MinorHigh;
		
		private System.Nullable<int> _MediumLow;
		
		private System.Nullable<int> _MediumHigh;
		
		private System.Nullable<int> _MajorLow;
		
		private System.Nullable<int> _MajorHigh;
		
		private string _Description;
		
		private System.Nullable<int> _BaseCostModifier;
		
		private System.Nullable<int> _BasePriceModifier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicShieldSpecialAbilityTypeChanging(int value);
    partial void OnMagicShieldSpecialAbilityTypeChanged();
    partial void OnMinorLowChanging(System.Nullable<int> value);
    partial void OnMinorLowChanged();
    partial void OnMinorHighChanging(System.Nullable<int> value);
    partial void OnMinorHighChanged();
    partial void OnMediumLowChanging(System.Nullable<int> value);
    partial void OnMediumLowChanged();
    partial void OnMediumHighChanging(System.Nullable<int> value);
    partial void OnMediumHighChanged();
    partial void OnMajorLowChanging(System.Nullable<int> value);
    partial void OnMajorLowChanged();
    partial void OnMajorHighChanging(System.Nullable<int> value);
    partial void OnMajorHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBaseCostModifierChanging(System.Nullable<int> value);
    partial void OnBaseCostModifierChanged();
    partial void OnBasePriceModifierChanging(System.Nullable<int> value);
    partial void OnBasePriceModifierChanged();
    #endregion
		
		public Magic_ShieldSpecialAbility()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicShieldSpecialAbilityType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicShieldSpecialAbilityType
		{
			get
			{
				return this._MagicShieldSpecialAbilityType;
			}
			set
			{
				if ((this._MagicShieldSpecialAbilityType != value))
				{
					this.OnMagicShieldSpecialAbilityTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicShieldSpecialAbilityType = value;
					this.SendPropertyChanged("MagicShieldSpecialAbilityType");
					this.OnMagicShieldSpecialAbilityTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MinorLow", DbType="Int")]
		public System.Nullable<int> MinorLow
		{
			get
			{
				return this._MinorLow;
			}
			set
			{
				if ((this._MinorLow != value))
				{
					this.OnMinorLowChanging(value);
					this.SendPropertyChanging();
					this._MinorLow = value;
					this.SendPropertyChanged("MinorLow");
					this.OnMinorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MinorHigh", DbType="Int")]
		public System.Nullable<int> MinorHigh
		{
			get
			{
				return this._MinorHigh;
			}
			set
			{
				if ((this._MinorHigh != value))
				{
					this.OnMinorHighChanging(value);
					this.SendPropertyChanging();
					this._MinorHigh = value;
					this.SendPropertyChanged("MinorHigh");
					this.OnMinorHighChanged();
				}
			}
		}
		
		[Column(Storage="_MediumLow", DbType="Int")]
		public System.Nullable<int> MediumLow
		{
			get
			{
				return this._MediumLow;
			}
			set
			{
				if ((this._MediumLow != value))
				{
					this.OnMediumLowChanging(value);
					this.SendPropertyChanging();
					this._MediumLow = value;
					this.SendPropertyChanged("MediumLow");
					this.OnMediumLowChanged();
				}
			}
		}
		
		[Column(Storage="_MediumHigh", DbType="Int")]
		public System.Nullable<int> MediumHigh
		{
			get
			{
				return this._MediumHigh;
			}
			set
			{
				if ((this._MediumHigh != value))
				{
					this.OnMediumHighChanging(value);
					this.SendPropertyChanging();
					this._MediumHigh = value;
					this.SendPropertyChanged("MediumHigh");
					this.OnMediumHighChanged();
				}
			}
		}
		
		[Column(Storage="_MajorLow", DbType="Int")]
		public System.Nullable<int> MajorLow
		{
			get
			{
				return this._MajorLow;
			}
			set
			{
				if ((this._MajorLow != value))
				{
					this.OnMajorLowChanging(value);
					this.SendPropertyChanging();
					this._MajorLow = value;
					this.SendPropertyChanged("MajorLow");
					this.OnMajorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MajorHigh", DbType="Int")]
		public System.Nullable<int> MajorHigh
		{
			get
			{
				return this._MajorHigh;
			}
			set
			{
				if ((this._MajorHigh != value))
				{
					this.OnMajorHighChanging(value);
					this.SendPropertyChanging();
					this._MajorHigh = value;
					this.SendPropertyChanged("MajorHigh");
					this.OnMajorHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_BaseCostModifier", DbType="Int")]
		public System.Nullable<int> BaseCostModifier
		{
			get
			{
				return this._BaseCostModifier;
			}
			set
			{
				if ((this._BaseCostModifier != value))
				{
					this.OnBaseCostModifierChanging(value);
					this.SendPropertyChanging();
					this._BaseCostModifier = value;
					this.SendPropertyChanged("BaseCostModifier");
					this.OnBaseCostModifierChanged();
				}
			}
		}
		
		[Column(Storage="_BasePriceModifier", DbType="Int")]
		public System.Nullable<int> BasePriceModifier
		{
			get
			{
				return this._BasePriceModifier;
			}
			set
			{
				if ((this._BasePriceModifier != value))
				{
					this.OnBasePriceModifierChanging(value);
					this.SendPropertyChanging();
					this._BasePriceModifier = value;
					this.SendPropertyChanged("BasePriceModifier");
					this.OnBasePriceModifierChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_SpecifcArmor")]
	public partial class Magic_SpecifcArmor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecificMagicArmorType;
		
		private System.Nullable<int> _MinorLow;
		
		private System.Nullable<int> _MinorHigh;
		
		private System.Nullable<int> _MediumLow;
		
		private System.Nullable<int> _MediumHigh;
		
		private System.Nullable<int> _MajorLow;
		
		private System.Nullable<int> _MajorHigh;
		
		private string _Description;
		
		private System.Nullable<int> _MarketPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecificMagicArmorTypeChanging(int value);
    partial void OnSpecificMagicArmorTypeChanged();
    partial void OnMinorLowChanging(System.Nullable<int> value);
    partial void OnMinorLowChanged();
    partial void OnMinorHighChanging(System.Nullable<int> value);
    partial void OnMinorHighChanged();
    partial void OnMediumLowChanging(System.Nullable<int> value);
    partial void OnMediumLowChanged();
    partial void OnMediumHighChanging(System.Nullable<int> value);
    partial void OnMediumHighChanged();
    partial void OnMajorLowChanging(System.Nullable<int> value);
    partial void OnMajorLowChanged();
    partial void OnMajorHighChanging(System.Nullable<int> value);
    partial void OnMajorHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMarketPriceChanging(System.Nullable<int> value);
    partial void OnMarketPriceChanged();
    #endregion
		
		public Magic_SpecifcArmor()
		{
			OnCreated();
		}
		
		[Column(Storage="_SpecificMagicArmorType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecificMagicArmorType
		{
			get
			{
				return this._SpecificMagicArmorType;
			}
			set
			{
				if ((this._SpecificMagicArmorType != value))
				{
					this.OnSpecificMagicArmorTypeChanging(value);
					this.SendPropertyChanging();
					this._SpecificMagicArmorType = value;
					this.SendPropertyChanged("SpecificMagicArmorType");
					this.OnSpecificMagicArmorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MinorLow", DbType="Int")]
		public System.Nullable<int> MinorLow
		{
			get
			{
				return this._MinorLow;
			}
			set
			{
				if ((this._MinorLow != value))
				{
					this.OnMinorLowChanging(value);
					this.SendPropertyChanging();
					this._MinorLow = value;
					this.SendPropertyChanged("MinorLow");
					this.OnMinorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MinorHigh", DbType="Int")]
		public System.Nullable<int> MinorHigh
		{
			get
			{
				return this._MinorHigh;
			}
			set
			{
				if ((this._MinorHigh != value))
				{
					this.OnMinorHighChanging(value);
					this.SendPropertyChanging();
					this._MinorHigh = value;
					this.SendPropertyChanged("MinorHigh");
					this.OnMinorHighChanged();
				}
			}
		}
		
		[Column(Storage="_MediumLow", DbType="Int")]
		public System.Nullable<int> MediumLow
		{
			get
			{
				return this._MediumLow;
			}
			set
			{
				if ((this._MediumLow != value))
				{
					this.OnMediumLowChanging(value);
					this.SendPropertyChanging();
					this._MediumLow = value;
					this.SendPropertyChanged("MediumLow");
					this.OnMediumLowChanged();
				}
			}
		}
		
		[Column(Storage="_MediumHigh", DbType="Int")]
		public System.Nullable<int> MediumHigh
		{
			get
			{
				return this._MediumHigh;
			}
			set
			{
				if ((this._MediumHigh != value))
				{
					this.OnMediumHighChanging(value);
					this.SendPropertyChanging();
					this._MediumHigh = value;
					this.SendPropertyChanged("MediumHigh");
					this.OnMediumHighChanged();
				}
			}
		}
		
		[Column(Storage="_MajorLow", DbType="Int")]
		public System.Nullable<int> MajorLow
		{
			get
			{
				return this._MajorLow;
			}
			set
			{
				if ((this._MajorLow != value))
				{
					this.OnMajorLowChanging(value);
					this.SendPropertyChanging();
					this._MajorLow = value;
					this.SendPropertyChanged("MajorLow");
					this.OnMajorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MajorHigh", DbType="Int")]
		public System.Nullable<int> MajorHigh
		{
			get
			{
				return this._MajorHigh;
			}
			set
			{
				if ((this._MajorHigh != value))
				{
					this.OnMajorHighChanging(value);
					this.SendPropertyChanging();
					this._MajorHigh = value;
					this.SendPropertyChanged("MajorHigh");
					this.OnMajorHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MarketPrice", DbType="Int")]
		public System.Nullable<int> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_SpecificShield")]
	public partial class Magic_SpecificShield : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecificMagicShieldType;
		
		private System.Nullable<int> _MinorLow;
		
		private System.Nullable<int> _MinorHigh;
		
		private System.Nullable<int> _MediumLow;
		
		private System.Nullable<int> _MediumHigh;
		
		private System.Nullable<int> _MajorLow;
		
		private System.Nullable<int> _MajorHigh;
		
		private string _Description;
		
		private System.Nullable<int> _MarketPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecificMagicShieldTypeChanging(int value);
    partial void OnSpecificMagicShieldTypeChanged();
    partial void OnMinorLowChanging(System.Nullable<int> value);
    partial void OnMinorLowChanged();
    partial void OnMinorHighChanging(System.Nullable<int> value);
    partial void OnMinorHighChanged();
    partial void OnMediumLowChanging(System.Nullable<int> value);
    partial void OnMediumLowChanged();
    partial void OnMediumHighChanging(System.Nullable<int> value);
    partial void OnMediumHighChanged();
    partial void OnMajorLowChanging(System.Nullable<int> value);
    partial void OnMajorLowChanged();
    partial void OnMajorHighChanging(System.Nullable<int> value);
    partial void OnMajorHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMarketPriceChanging(System.Nullable<int> value);
    partial void OnMarketPriceChanged();
    #endregion
		
		public Magic_SpecificShield()
		{
			OnCreated();
		}
		
		[Column(Storage="_SpecificMagicShieldType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecificMagicShieldType
		{
			get
			{
				return this._SpecificMagicShieldType;
			}
			set
			{
				if ((this._SpecificMagicShieldType != value))
				{
					this.OnSpecificMagicShieldTypeChanging(value);
					this.SendPropertyChanging();
					this._SpecificMagicShieldType = value;
					this.SendPropertyChanged("SpecificMagicShieldType");
					this.OnSpecificMagicShieldTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MinorLow", DbType="Int")]
		public System.Nullable<int> MinorLow
		{
			get
			{
				return this._MinorLow;
			}
			set
			{
				if ((this._MinorLow != value))
				{
					this.OnMinorLowChanging(value);
					this.SendPropertyChanging();
					this._MinorLow = value;
					this.SendPropertyChanged("MinorLow");
					this.OnMinorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MinorHigh", DbType="Int")]
		public System.Nullable<int> MinorHigh
		{
			get
			{
				return this._MinorHigh;
			}
			set
			{
				if ((this._MinorHigh != value))
				{
					this.OnMinorHighChanging(value);
					this.SendPropertyChanging();
					this._MinorHigh = value;
					this.SendPropertyChanged("MinorHigh");
					this.OnMinorHighChanged();
				}
			}
		}
		
		[Column(Storage="_MediumLow", DbType="Int")]
		public System.Nullable<int> MediumLow
		{
			get
			{
				return this._MediumLow;
			}
			set
			{
				if ((this._MediumLow != value))
				{
					this.OnMediumLowChanging(value);
					this.SendPropertyChanging();
					this._MediumLow = value;
					this.SendPropertyChanged("MediumLow");
					this.OnMediumLowChanged();
				}
			}
		}
		
		[Column(Storage="_MediumHigh", DbType="Int")]
		public System.Nullable<int> MediumHigh
		{
			get
			{
				return this._MediumHigh;
			}
			set
			{
				if ((this._MediumHigh != value))
				{
					this.OnMediumHighChanging(value);
					this.SendPropertyChanging();
					this._MediumHigh = value;
					this.SendPropertyChanged("MediumHigh");
					this.OnMediumHighChanged();
				}
			}
		}
		
		[Column(Storage="_MajorLow", DbType="Int")]
		public System.Nullable<int> MajorLow
		{
			get
			{
				return this._MajorLow;
			}
			set
			{
				if ((this._MajorLow != value))
				{
					this.OnMajorLowChanging(value);
					this.SendPropertyChanging();
					this._MajorLow = value;
					this.SendPropertyChanged("MajorLow");
					this.OnMajorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MajorHigh", DbType="Int")]
		public System.Nullable<int> MajorHigh
		{
			get
			{
				return this._MajorHigh;
			}
			set
			{
				if ((this._MajorHigh != value))
				{
					this.OnMajorHighChanging(value);
					this.SendPropertyChanging();
					this._MajorHigh = value;
					this.SendPropertyChanged("MajorHigh");
					this.OnMajorHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MarketPrice", DbType="Int")]
		public System.Nullable<int> MarketPrice
		{
			get
			{
				return this._MarketPrice;
			}
			set
			{
				if ((this._MarketPrice != value))
				{
					this.OnMarketPriceChanging(value);
					this.SendPropertyChanging();
					this._MarketPrice = value;
					this.SendPropertyChanged("MarketPrice");
					this.OnMarketPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_ArmorShield")]
	public partial class Magic_ArmorShield : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicArmorShieldType;
		
		private System.Nullable<int> _MinorLow;
		
		private System.Nullable<int> _MinorHigh;
		
		private System.Nullable<int> _MediumLow;
		
		private System.Nullable<int> _MediumHigh;
		
		private System.Nullable<int> _MajorLow;
		
		private System.Nullable<int> _MajorHigh;
		
		private string _Description;
		
		private System.Nullable<int> _BasePrice;
		
		private System.Nullable<int> _EnhancementBonus;
		
		private System.Nullable<int> _ArmorOrShield;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicArmorShieldTypeChanging(int value);
    partial void OnMagicArmorShieldTypeChanged();
    partial void OnMinorLowChanging(System.Nullable<int> value);
    partial void OnMinorLowChanged();
    partial void OnMinorHighChanging(System.Nullable<int> value);
    partial void OnMinorHighChanged();
    partial void OnMediumLowChanging(System.Nullable<int> value);
    partial void OnMediumLowChanged();
    partial void OnMediumHighChanging(System.Nullable<int> value);
    partial void OnMediumHighChanged();
    partial void OnMajorLowChanging(System.Nullable<int> value);
    partial void OnMajorLowChanged();
    partial void OnMajorHighChanging(System.Nullable<int> value);
    partial void OnMajorHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBasePriceChanging(System.Nullable<int> value);
    partial void OnBasePriceChanged();
    partial void OnEnhancementBonusChanging(System.Nullable<int> value);
    partial void OnEnhancementBonusChanged();
    partial void OnArmorOrShieldChanging(System.Nullable<int> value);
    partial void OnArmorOrShieldChanged();
    #endregion
		
		public Magic_ArmorShield()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicArmorShieldType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicArmorShieldType
		{
			get
			{
				return this._MagicArmorShieldType;
			}
			set
			{
				if ((this._MagicArmorShieldType != value))
				{
					this.OnMagicArmorShieldTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicArmorShieldType = value;
					this.SendPropertyChanged("MagicArmorShieldType");
					this.OnMagicArmorShieldTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MinorLow", DbType="Int")]
		public System.Nullable<int> MinorLow
		{
			get
			{
				return this._MinorLow;
			}
			set
			{
				if ((this._MinorLow != value))
				{
					this.OnMinorLowChanging(value);
					this.SendPropertyChanging();
					this._MinorLow = value;
					this.SendPropertyChanged("MinorLow");
					this.OnMinorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MinorHigh", DbType="Int")]
		public System.Nullable<int> MinorHigh
		{
			get
			{
				return this._MinorHigh;
			}
			set
			{
				if ((this._MinorHigh != value))
				{
					this.OnMinorHighChanging(value);
					this.SendPropertyChanging();
					this._MinorHigh = value;
					this.SendPropertyChanged("MinorHigh");
					this.OnMinorHighChanged();
				}
			}
		}
		
		[Column(Storage="_MediumLow", DbType="Int")]
		public System.Nullable<int> MediumLow
		{
			get
			{
				return this._MediumLow;
			}
			set
			{
				if ((this._MediumLow != value))
				{
					this.OnMediumLowChanging(value);
					this.SendPropertyChanging();
					this._MediumLow = value;
					this.SendPropertyChanged("MediumLow");
					this.OnMediumLowChanged();
				}
			}
		}
		
		[Column(Storage="_MediumHigh", DbType="Int")]
		public System.Nullable<int> MediumHigh
		{
			get
			{
				return this._MediumHigh;
			}
			set
			{
				if ((this._MediumHigh != value))
				{
					this.OnMediumHighChanging(value);
					this.SendPropertyChanging();
					this._MediumHigh = value;
					this.SendPropertyChanged("MediumHigh");
					this.OnMediumHighChanged();
				}
			}
		}
		
		[Column(Storage="_MajorLow", DbType="Int")]
		public System.Nullable<int> MajorLow
		{
			get
			{
				return this._MajorLow;
			}
			set
			{
				if ((this._MajorLow != value))
				{
					this.OnMajorLowChanging(value);
					this.SendPropertyChanging();
					this._MajorLow = value;
					this.SendPropertyChanged("MajorLow");
					this.OnMajorLowChanged();
				}
			}
		}
		
		[Column(Storage="_MajorHigh", DbType="Int")]
		public System.Nullable<int> MajorHigh
		{
			get
			{
				return this._MajorHigh;
			}
			set
			{
				if ((this._MajorHigh != value))
				{
					this.OnMajorHighChanging(value);
					this.SendPropertyChanging();
					this._MajorHigh = value;
					this.SendPropertyChanged("MajorHigh");
					this.OnMajorHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_BasePrice", DbType="Int")]
		public System.Nullable<int> BasePrice
		{
			get
			{
				return this._BasePrice;
			}
			set
			{
				if ((this._BasePrice != value))
				{
					this.OnBasePriceChanging(value);
					this.SendPropertyChanging();
					this._BasePrice = value;
					this.SendPropertyChanged("BasePrice");
					this.OnBasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_EnhancementBonus", DbType="Int")]
		public System.Nullable<int> EnhancementBonus
		{
			get
			{
				return this._EnhancementBonus;
			}
			set
			{
				if ((this._EnhancementBonus != value))
				{
					this.OnEnhancementBonusChanging(value);
					this.SendPropertyChanging();
					this._EnhancementBonus = value;
					this.SendPropertyChanged("EnhancementBonus");
					this.OnEnhancementBonusChanged();
				}
			}
		}
		
		[Column(Storage="_ArmorOrShield", DbType="Int")]
		public System.Nullable<int> ArmorOrShield
		{
			get
			{
				return this._ArmorOrShield;
			}
			set
			{
				if ((this._ArmorOrShield != value))
				{
					this.OnArmorOrShieldChanging(value);
					this.SendPropertyChanging();
					this._ArmorOrShield = value;
					this.SendPropertyChanged("ArmorOrShield");
					this.OnArmorOrShieldChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Magic_ShieldType")]
	public partial class Magic_ShieldType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicShieldType;
		
		private System.Nullable<int> _Low;
		
		private System.Nullable<int> _High;
		
		private string _Description;
		
		private System.Nullable<int> _ShieldCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicShieldTypeChanging(int value);
    partial void OnMagicShieldTypeChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShieldCostChanging(System.Nullable<int> value);
    partial void OnShieldCostChanged();
    #endregion
		
		public Magic_ShieldType()
		{
			OnCreated();
		}
		
		[Column(Storage="_MagicShieldType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicShieldType
		{
			get
			{
				return this._MagicShieldType;
			}
			set
			{
				if ((this._MagicShieldType != value))
				{
					this.OnMagicShieldTypeChanging(value);
					this.SendPropertyChanging();
					this._MagicShieldType = value;
					this.SendPropertyChanged("MagicShieldType");
					this.OnMagicShieldTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ShieldCost", DbType="Int")]
		public System.Nullable<int> ShieldCost
		{
			get
			{
				return this._ShieldCost;
			}
			set
			{
				if ((this._ShieldCost != value))
				{
					this.OnShieldCostChanging(value);
					this.SendPropertyChanging();
					this._ShieldCost = value;
					this.SendPropertyChanged("ShieldCost");
					this.OnShieldCostChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
