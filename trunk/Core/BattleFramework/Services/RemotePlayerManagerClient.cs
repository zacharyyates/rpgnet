//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ServiceModel;
using System.CodeDom.Compiler;
using System.ServiceModel.Channels;

namespace YatesMorrison.RolePlay.BattleFramework
{

	//[GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
	//[ServiceContractAttribute(Namespace = "http://yatesmorrison.com/RolePlay", ConfigurationName = "IRemotePlayerManager")]
	//public interface IRemotePlayerManager
	//{

	//    [OperationContractAttribute(Action = "http://yatesmorrison.com/RolePlay/IRemotePlayerManager/Connect", ReplyAction = "http://yatesmorrison.com/RolePlay/IRemotePlayerManager/ConnectResponse")]
	//    string Connect( string clientName );

	//    [OperationContractAttribute(Action = "http://yatesmorrison.com/RolePlay/IRemotePlayerManager/Disconnect", ReplyAction = "http://yatesmorrison.com/RolePlay/IRemotePlayerManager/DisconnectResponse")]
	//    void Disconnect( string clientName );
	//}

	[GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
	public interface IRemotePlayerManagerChannel : IRemotePlayerManager, IClientChannel
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
	public partial class RemotePlayerManagerClient : ClientBase<IRemotePlayerManager>, IRemotePlayerManager
	{

		public RemotePlayerManagerClient()
		{
		}

		public RemotePlayerManagerClient( string endpointConfigurationName ) :
			base(endpointConfigurationName)
		{
		}

		public RemotePlayerManagerClient( string endpointConfigurationName, string remoteAddress ) :
			base(endpointConfigurationName, remoteAddress)
		{
		}

		public RemotePlayerManagerClient( string endpointConfigurationName, EndpointAddress remoteAddress ) :
			base(endpointConfigurationName, remoteAddress)
		{
		}

		public RemotePlayerManagerClient( Binding binding, EndpointAddress remoteAddress ) :
			base(binding, remoteAddress)
		{
		}

		public string Connect( string clientName )
		{
			return base.Channel.Connect(clientName);
		}

		public void Disconnect( string clientName )
		{
			base.Channel.Disconnect(clientName);
		}
	}
}