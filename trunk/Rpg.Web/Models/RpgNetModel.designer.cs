#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rpg.Web.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RpgNet.Application")]
	public partial class RpgNetModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActor(Actor instance);
    partial void UpdateActor(Actor instance);
    partial void DeleteActor(Actor instance);
    partial void InsertRace(Race instance);
    partial void UpdateRace(Race instance);
    partial void DeleteRace(Race instance);
    partial void InsertActorBonus(ActorBonus instance);
    partial void UpdateActorBonus(ActorBonus instance);
    partial void DeleteActorBonus(ActorBonus instance);
    partial void InsertActorFeat(ActorFeat instance);
    partial void UpdateActorFeat(ActorFeat instance);
    partial void DeleteActorFeat(ActorFeat instance);
    partial void InsertActorPower(ActorPower instance);
    partial void UpdateActorPower(ActorPower instance);
    partial void DeleteActorPower(ActorPower instance);
    partial void InsertActorSkill(ActorSkill instance);
    partial void UpdateActorSkill(ActorSkill instance);
    partial void DeleteActorSkill(ActorSkill instance);
    partial void InsertCharacterClass(CharacterClass instance);
    partial void UpdateCharacterClass(CharacterClass instance);
    partial void DeleteCharacterClass(CharacterClass instance);
    partial void InsertDeity(Deity instance);
    partial void UpdateDeity(Deity instance);
    partial void DeleteDeity(Deity instance);
    partial void InsertFeat(Feat instance);
    partial void UpdateFeat(Feat instance);
    partial void DeleteFeat(Feat instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertPower(Power instance);
    partial void UpdatePower(Power instance);
    partial void DeletePower(Power instance);
    #endregion
		
		public RpgNetModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RpgNet_ApplicationConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RpgNetModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RpgNetModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RpgNetModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RpgNetModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actor> Actors
		{
			get
			{
				return this.GetTable<Actor>();
			}
		}
		
		public System.Data.Linq.Table<Race> Races
		{
			get
			{
				return this.GetTable<Race>();
			}
		}
		
		public System.Data.Linq.Table<ActorBonus> ActorBonus
		{
			get
			{
				return this.GetTable<ActorBonus>();
			}
		}
		
		public System.Data.Linq.Table<ActorFeat> ActorFeats
		{
			get
			{
				return this.GetTable<ActorFeat>();
			}
		}
		
		public System.Data.Linq.Table<ActorPower> ActorPowers
		{
			get
			{
				return this.GetTable<ActorPower>();
			}
		}
		
		public System.Data.Linq.Table<ActorSkill> ActorSkills
		{
			get
			{
				return this.GetTable<ActorSkill>();
			}
		}
		
		public System.Data.Linq.Table<CharacterClass> CharacterClasses
		{
			get
			{
				return this.GetTable<CharacterClass>();
			}
		}
		
		public System.Data.Linq.Table<Deity> Deities
		{
			get
			{
				return this.GetTable<Deity>();
			}
		}
		
		public System.Data.Linq.Table<Feat> Feats
		{
			get
			{
				return this.GetTable<Feat>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Power> Powers
		{
			get
			{
				return this.GetTable<Power>();
			}
		}
	}
	
	[Table(Name="dbo.Actor")]
	public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PlayerFK;
		
		private System.Nullable<int> _CharacterClassFK;
		
		private System.Nullable<int> _RaceFK;
		
		private System.Nullable<int> _DeityFK;
		
		private System.Nullable<int> _GroupFK;
		
		private string _Name;
		
		private System.Nullable<int> _Strength;
		
		private System.Nullable<int> _Constitution;
		
		private System.Nullable<int> _Dexterity;
		
		private System.Nullable<int> _Intelligence;
		
		private System.Nullable<int> _Wisdom;
		
		private System.Nullable<int> _Charisma;
		
		private System.Nullable<decimal> _Wealth;
		
		private System.Nullable<int> _Experience;
		
		private System.Nullable<int> _Age;
		
		private System.Nullable<byte> _Gender;
		
		private System.Nullable<int> _Height;
		
		private System.Nullable<int> _Weight;
		
		private System.Nullable<byte> _Alignment;
		
		private System.Nullable<int> _Milestones;
		
		private string _PersonalityTraits;
		
		private string _MannerismsAndAppearance;
		
		private string _Background;
		
		private string _OtherEquipment;
		
		private EntitySet<ActorBonus> _ActorBonus;
		
		private EntitySet<ActorFeat> _ActorFeats;
		
		private EntitySet<ActorPower> _ActorPowers;
		
		private EntitySet<ActorSkill> _ActorSkills;
		
		private EntityRef<Race> _Race;
		
		private EntityRef<CharacterClass> _CharacterClass;
		
		private EntityRef<Deity> _Deity;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlayerFKChanging(System.Nullable<int> value);
    partial void OnPlayerFKChanged();
    partial void OnCharacterClassFKChanging(System.Nullable<int> value);
    partial void OnCharacterClassFKChanged();
    partial void OnRaceFKChanging(System.Nullable<int> value);
    partial void OnRaceFKChanged();
    partial void OnDeityFKChanging(System.Nullable<int> value);
    partial void OnDeityFKChanged();
    partial void OnGroupFKChanging(System.Nullable<int> value);
    partial void OnGroupFKChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStrengthChanging(System.Nullable<int> value);
    partial void OnStrengthChanged();
    partial void OnConstitutionChanging(System.Nullable<int> value);
    partial void OnConstitutionChanged();
    partial void OnDexterityChanging(System.Nullable<int> value);
    partial void OnDexterityChanged();
    partial void OnIntelligenceChanging(System.Nullable<int> value);
    partial void OnIntelligenceChanged();
    partial void OnWisdomChanging(System.Nullable<int> value);
    partial void OnWisdomChanged();
    partial void OnCharismaChanging(System.Nullable<int> value);
    partial void OnCharismaChanged();
    partial void OnWealthChanging(System.Nullable<decimal> value);
    partial void OnWealthChanged();
    partial void OnExperienceChanging(System.Nullable<int> value);
    partial void OnExperienceChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(System.Nullable<byte> value);
    partial void OnGenderChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(System.Nullable<int> value);
    partial void OnWeightChanged();
    partial void OnAlignmentChanging(System.Nullable<byte> value);
    partial void OnAlignmentChanged();
    partial void OnMilestonesChanging(System.Nullable<int> value);
    partial void OnMilestonesChanged();
    partial void OnPersonalityTraitsChanging(string value);
    partial void OnPersonalityTraitsChanged();
    partial void OnMannerismsAndAppearanceChanging(string value);
    partial void OnMannerismsAndAppearanceChanged();
    partial void OnBackgroundChanging(string value);
    partial void OnBackgroundChanged();
    partial void OnOtherEquipmentChanging(string value);
    partial void OnOtherEquipmentChanged();
    #endregion
		
		public Actor()
		{
			this._ActorBonus = new EntitySet<ActorBonus>(new Action<ActorBonus>(this.attach_ActorBonus), new Action<ActorBonus>(this.detach_ActorBonus));
			this._ActorFeats = new EntitySet<ActorFeat>(new Action<ActorFeat>(this.attach_ActorFeats), new Action<ActorFeat>(this.detach_ActorFeats));
			this._ActorPowers = new EntitySet<ActorPower>(new Action<ActorPower>(this.attach_ActorPowers), new Action<ActorPower>(this.detach_ActorPowers));
			this._ActorSkills = new EntitySet<ActorSkill>(new Action<ActorSkill>(this.attach_ActorSkills), new Action<ActorSkill>(this.detach_ActorSkills));
			this._Race = default(EntityRef<Race>);
			this._CharacterClass = default(EntityRef<CharacterClass>);
			this._Deity = default(EntityRef<Deity>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerFK", DbType="Int")]
		public System.Nullable<int> PlayerFK
		{
			get
			{
				return this._PlayerFK;
			}
			set
			{
				if ((this._PlayerFK != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerFKChanging(value);
					this.SendPropertyChanging();
					this._PlayerFK = value;
					this.SendPropertyChanged("PlayerFK");
					this.OnPlayerFKChanged();
				}
			}
		}
		
		[Column(Storage="_CharacterClassFK", DbType="Int")]
		public System.Nullable<int> CharacterClassFK
		{
			get
			{
				return this._CharacterClassFK;
			}
			set
			{
				if ((this._CharacterClassFK != value))
				{
					if (this._CharacterClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterClassFKChanging(value);
					this.SendPropertyChanging();
					this._CharacterClassFK = value;
					this.SendPropertyChanged("CharacterClassFK");
					this.OnCharacterClassFKChanged();
				}
			}
		}
		
		[Column(Storage="_RaceFK", DbType="Int")]
		public System.Nullable<int> RaceFK
		{
			get
			{
				return this._RaceFK;
			}
			set
			{
				if ((this._RaceFK != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceFKChanging(value);
					this.SendPropertyChanging();
					this._RaceFK = value;
					this.SendPropertyChanged("RaceFK");
					this.OnRaceFKChanged();
				}
			}
		}
		
		[Column(Storage="_DeityFK", DbType="Int")]
		public System.Nullable<int> DeityFK
		{
			get
			{
				return this._DeityFK;
			}
			set
			{
				if ((this._DeityFK != value))
				{
					if (this._Deity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeityFKChanging(value);
					this.SendPropertyChanging();
					this._DeityFK = value;
					this.SendPropertyChanged("DeityFK");
					this.OnDeityFKChanged();
				}
			}
		}
		
		[Column(Storage="_GroupFK", DbType="Int")]
		public System.Nullable<int> GroupFK
		{
			get
			{
				return this._GroupFK;
			}
			set
			{
				if ((this._GroupFK != value))
				{
					this.OnGroupFKChanging(value);
					this.SendPropertyChanging();
					this._GroupFK = value;
					this.SendPropertyChanged("GroupFK");
					this.OnGroupFKChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Strength", DbType="Int")]
		public System.Nullable<int> Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[Column(Storage="_Constitution", DbType="Int")]
		public System.Nullable<int> Constitution
		{
			get
			{
				return this._Constitution;
			}
			set
			{
				if ((this._Constitution != value))
				{
					this.OnConstitutionChanging(value);
					this.SendPropertyChanging();
					this._Constitution = value;
					this.SendPropertyChanged("Constitution");
					this.OnConstitutionChanged();
				}
			}
		}
		
		[Column(Storage="_Dexterity", DbType="Int")]
		public System.Nullable<int> Dexterity
		{
			get
			{
				return this._Dexterity;
			}
			set
			{
				if ((this._Dexterity != value))
				{
					this.OnDexterityChanging(value);
					this.SendPropertyChanging();
					this._Dexterity = value;
					this.SendPropertyChanged("Dexterity");
					this.OnDexterityChanged();
				}
			}
		}
		
		[Column(Storage="_Intelligence", DbType="Int")]
		public System.Nullable<int> Intelligence
		{
			get
			{
				return this._Intelligence;
			}
			set
			{
				if ((this._Intelligence != value))
				{
					this.OnIntelligenceChanging(value);
					this.SendPropertyChanging();
					this._Intelligence = value;
					this.SendPropertyChanged("Intelligence");
					this.OnIntelligenceChanged();
				}
			}
		}
		
		[Column(Storage="_Wisdom", DbType="Int")]
		public System.Nullable<int> Wisdom
		{
			get
			{
				return this._Wisdom;
			}
			set
			{
				if ((this._Wisdom != value))
				{
					this.OnWisdomChanging(value);
					this.SendPropertyChanging();
					this._Wisdom = value;
					this.SendPropertyChanged("Wisdom");
					this.OnWisdomChanged();
				}
			}
		}
		
		[Column(Storage="_Charisma", DbType="Int")]
		public System.Nullable<int> Charisma
		{
			get
			{
				return this._Charisma;
			}
			set
			{
				if ((this._Charisma != value))
				{
					this.OnCharismaChanging(value);
					this.SendPropertyChanging();
					this._Charisma = value;
					this.SendPropertyChanged("Charisma");
					this.OnCharismaChanged();
				}
			}
		}
		
		[Column(Storage="_Wealth", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Wealth
		{
			get
			{
				return this._Wealth;
			}
			set
			{
				if ((this._Wealth != value))
				{
					this.OnWealthChanging(value);
					this.SendPropertyChanging();
					this._Wealth = value;
					this.SendPropertyChanged("Wealth");
					this.OnWealthChanged();
				}
			}
		}
		
		[Column(Storage="_Experience", DbType="Int")]
		public System.Nullable<int> Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[Column(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="TinyInt")]
		public System.Nullable<byte> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Int")]
		public System.Nullable<int> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Alignment", DbType="TinyInt")]
		public System.Nullable<byte> Alignment
		{
			get
			{
				return this._Alignment;
			}
			set
			{
				if ((this._Alignment != value))
				{
					this.OnAlignmentChanging(value);
					this.SendPropertyChanging();
					this._Alignment = value;
					this.SendPropertyChanged("Alignment");
					this.OnAlignmentChanged();
				}
			}
		}
		
		[Column(Storage="_Milestones", DbType="Int")]
		public System.Nullable<int> Milestones
		{
			get
			{
				return this._Milestones;
			}
			set
			{
				if ((this._Milestones != value))
				{
					this.OnMilestonesChanging(value);
					this.SendPropertyChanging();
					this._Milestones = value;
					this.SendPropertyChanged("Milestones");
					this.OnMilestonesChanged();
				}
			}
		}
		
		[Column(Storage="_PersonalityTraits", DbType="NVarChar(MAX)")]
		public string PersonalityTraits
		{
			get
			{
				return this._PersonalityTraits;
			}
			set
			{
				if ((this._PersonalityTraits != value))
				{
					this.OnPersonalityTraitsChanging(value);
					this.SendPropertyChanging();
					this._PersonalityTraits = value;
					this.SendPropertyChanged("PersonalityTraits");
					this.OnPersonalityTraitsChanged();
				}
			}
		}
		
		[Column(Storage="_MannerismsAndAppearance", DbType="NVarChar(MAX)")]
		public string MannerismsAndAppearance
		{
			get
			{
				return this._MannerismsAndAppearance;
			}
			set
			{
				if ((this._MannerismsAndAppearance != value))
				{
					this.OnMannerismsAndAppearanceChanging(value);
					this.SendPropertyChanging();
					this._MannerismsAndAppearance = value;
					this.SendPropertyChanged("MannerismsAndAppearance");
					this.OnMannerismsAndAppearanceChanged();
				}
			}
		}
		
		[Column(Storage="_Background", DbType="NVarChar(MAX)")]
		public string Background
		{
			get
			{
				return this._Background;
			}
			set
			{
				if ((this._Background != value))
				{
					this.OnBackgroundChanging(value);
					this.SendPropertyChanging();
					this._Background = value;
					this.SendPropertyChanged("Background");
					this.OnBackgroundChanged();
				}
			}
		}
		
		[Column(Storage="_OtherEquipment", DbType="NVarChar(MAX)")]
		public string OtherEquipment
		{
			get
			{
				return this._OtherEquipment;
			}
			set
			{
				if ((this._OtherEquipment != value))
				{
					this.OnOtherEquipmentChanging(value);
					this.SendPropertyChanging();
					this._OtherEquipment = value;
					this.SendPropertyChanged("OtherEquipment");
					this.OnOtherEquipmentChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActorBonus", Storage="_ActorBonus", OtherKey="ActorIdFk")]
		public EntitySet<ActorBonus> ActorBonus
		{
			get
			{
				return this._ActorBonus;
			}
			set
			{
				this._ActorBonus.Assign(value);
			}
		}
		
		[Association(Name="Actor_ActorFeat", Storage="_ActorFeats", OtherKey="ActorIdFk")]
		public EntitySet<ActorFeat> ActorFeats
		{
			get
			{
				return this._ActorFeats;
			}
			set
			{
				this._ActorFeats.Assign(value);
			}
		}
		
		[Association(Name="Actor_ActorPower", Storage="_ActorPowers", OtherKey="ActorIdFk")]
		public EntitySet<ActorPower> ActorPowers
		{
			get
			{
				return this._ActorPowers;
			}
			set
			{
				this._ActorPowers.Assign(value);
			}
		}
		
		[Association(Name="Actor_ActorSkill", Storage="_ActorSkills", OtherKey="ActorIdFk")]
		public EntitySet<ActorSkill> ActorSkills
		{
			get
			{
				return this._ActorSkills;
			}
			set
			{
				this._ActorSkills.Assign(value);
			}
		}
		
		[Association(Name="Race_Actor", Storage="_Race", ThisKey="RaceFK", IsForeignKey=true, DeleteRule="CASCADE")]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.Actors.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.Actors.Add(this);
						this._RaceFK = value.Id;
					}
					else
					{
						this._RaceFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		[Association(Name="CharacterClass_Actor", Storage="_CharacterClass", ThisKey="CharacterClassFK", IsForeignKey=true, DeleteRule="CASCADE")]
		public CharacterClass CharacterClass
		{
			get
			{
				return this._CharacterClass.Entity;
			}
			set
			{
				CharacterClass previousValue = this._CharacterClass.Entity;
				if (((previousValue != value) 
							|| (this._CharacterClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CharacterClass.Entity = null;
						previousValue.Actors.Remove(this);
					}
					this._CharacterClass.Entity = value;
					if ((value != null))
					{
						value.Actors.Add(this);
						this._CharacterClassFK = value.Id;
					}
					else
					{
						this._CharacterClassFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("CharacterClass");
				}
			}
		}
		
		[Association(Name="Deity_Actor", Storage="_Deity", ThisKey="DeityFK", IsForeignKey=true, DeleteRule="CASCADE")]
		public Deity Deity
		{
			get
			{
				return this._Deity.Entity;
			}
			set
			{
				Deity previousValue = this._Deity.Entity;
				if (((previousValue != value) 
							|| (this._Deity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deity.Entity = null;
						previousValue.Actors.Remove(this);
					}
					this._Deity.Entity = value;
					if ((value != null))
					{
						value.Actors.Add(this);
						this._DeityFK = value.Id;
					}
					else
					{
						this._DeityFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Deity");
				}
			}
		}
		
		[Association(Name="Player_Actor", Storage="_Player", ThisKey="PlayerFK", IsForeignKey=true, DeleteRule="CASCADE")]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Actors.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Actors.Add(this);
						this._PlayerFK = value.Id;
					}
					else
					{
						this._PlayerFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActorBonus(ActorBonus entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_ActorBonus(ActorBonus entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
		
		private void attach_ActorFeats(ActorFeat entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_ActorFeats(ActorFeat entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
		
		private void attach_ActorPowers(ActorPower entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_ActorPowers(ActorPower entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
		
		private void attach_ActorSkills(ActorSkill entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_ActorSkills(ActorSkill entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
	}
	
	[Table(Name="dbo.Race")]
	public partial class Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<byte> _Size;
		
		private EntitySet<Actor> _Actors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSizeChanging(System.Nullable<byte> value);
    partial void OnSizeChanged();
    #endregion
		
		public Race()
		{
			this._Actors = new EntitySet<Actor>(new Action<Actor>(this.attach_Actors), new Action<Actor>(this.detach_Actors));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="TinyInt")]
		public System.Nullable<byte> Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Association(Name="Race_Actor", Storage="_Actors", OtherKey="RaceFK")]
		public EntitySet<Actor> Actors
		{
			get
			{
				return this._Actors;
			}
			set
			{
				this._Actors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actors(Actor entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_Actors(Actor entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
	}
	
	[Table(Name="dbo.ActorBonus")]
	public partial class ActorBonus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorIdFk;
		
		private string _Name;
		
		private string _Type;
		
		private System.Nullable<int> _Bonus;
		
		private EntityRef<Actor> _Actor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIdFkChanging(int value);
    partial void OnActorIdFkChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnBonusChanging(System.Nullable<int> value);
    partial void OnBonusChanged();
    #endregion
		
		public ActorBonus()
		{
			this._Actor = default(EntityRef<Actor>);
			OnCreated();
		}
		
		[Column(Storage="_ActorIdFk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActorIdFk
		{
			get
			{
				return this._ActorIdFk;
			}
			set
			{
				if ((this._ActorIdFk != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorIdFkChanging(value);
					this.SendPropertyChanging();
					this._ActorIdFk = value;
					this.SendPropertyChanged("ActorIdFk");
					this.OnActorIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Bonus", DbType="Int")]
		public System.Nullable<int> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				if ((this._Bonus != value))
				{
					this.OnBonusChanging(value);
					this.SendPropertyChanging();
					this._Bonus = value;
					this.SendPropertyChanged("Bonus");
					this.OnBonusChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActorBonus", Storage="_Actor", ThisKey="ActorIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.ActorBonus.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.ActorBonus.Add(this);
						this._ActorIdFk = value.Id;
					}
					else
					{
						this._ActorIdFk = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActorFeat")]
	public partial class ActorFeat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorIdFk;
		
		private int _FeatIdFk;
		
		private string _Target;
		
		private EntityRef<Actor> _Actor;
		
		private EntityRef<Feat> _Feat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIdFkChanging(int value);
    partial void OnActorIdFkChanged();
    partial void OnFeatIdFkChanging(int value);
    partial void OnFeatIdFkChanged();
    partial void OnTargetChanging(string value);
    partial void OnTargetChanged();
    #endregion
		
		public ActorFeat()
		{
			this._Actor = default(EntityRef<Actor>);
			this._Feat = default(EntityRef<Feat>);
			OnCreated();
		}
		
		[Column(Storage="_ActorIdFk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActorIdFk
		{
			get
			{
				return this._ActorIdFk;
			}
			set
			{
				if ((this._ActorIdFk != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorIdFkChanging(value);
					this.SendPropertyChanging();
					this._ActorIdFk = value;
					this.SendPropertyChanged("ActorIdFk");
					this.OnActorIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_FeatIdFk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FeatIdFk
		{
			get
			{
				return this._FeatIdFk;
			}
			set
			{
				if ((this._FeatIdFk != value))
				{
					if (this._Feat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeatIdFkChanging(value);
					this.SendPropertyChanging();
					this._FeatIdFk = value;
					this.SendPropertyChanged("FeatIdFk");
					this.OnFeatIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Target", DbType="NVarChar(50)")]
		public string Target
		{
			get
			{
				return this._Target;
			}
			set
			{
				if ((this._Target != value))
				{
					this.OnTargetChanging(value);
					this.SendPropertyChanging();
					this._Target = value;
					this.SendPropertyChanged("Target");
					this.OnTargetChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActorFeat", Storage="_Actor", ThisKey="ActorIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.ActorFeats.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.ActorFeats.Add(this);
						this._ActorIdFk = value.Id;
					}
					else
					{
						this._ActorIdFk = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		[Association(Name="Feat_ActorFeat", Storage="_Feat", ThisKey="FeatIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Feat Feat
		{
			get
			{
				return this._Feat.Entity;
			}
			set
			{
				Feat previousValue = this._Feat.Entity;
				if (((previousValue != value) 
							|| (this._Feat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feat.Entity = null;
						previousValue.ActorFeats.Remove(this);
					}
					this._Feat.Entity = value;
					if ((value != null))
					{
						value.ActorFeats.Add(this);
						this._FeatIdFk = value.Id;
					}
					else
					{
						this._FeatIdFk = default(int);
					}
					this.SendPropertyChanged("Feat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActorPower")]
	public partial class ActorPower : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorIdFk;
		
		private int _PowerIdFk;
		
		private EntityRef<Actor> _Actor;
		
		private EntityRef<Power> _Power;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIdFkChanging(int value);
    partial void OnActorIdFkChanged();
    partial void OnPowerIdFkChanging(int value);
    partial void OnPowerIdFkChanged();
    #endregion
		
		public ActorPower()
		{
			this._Actor = default(EntityRef<Actor>);
			this._Power = default(EntityRef<Power>);
			OnCreated();
		}
		
		[Column(Storage="_ActorIdFk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActorIdFk
		{
			get
			{
				return this._ActorIdFk;
			}
			set
			{
				if ((this._ActorIdFk != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorIdFkChanging(value);
					this.SendPropertyChanging();
					this._ActorIdFk = value;
					this.SendPropertyChanged("ActorIdFk");
					this.OnActorIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_PowerIdFk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PowerIdFk
		{
			get
			{
				return this._PowerIdFk;
			}
			set
			{
				if ((this._PowerIdFk != value))
				{
					if (this._Power.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerIdFkChanging(value);
					this.SendPropertyChanging();
					this._PowerIdFk = value;
					this.SendPropertyChanged("PowerIdFk");
					this.OnPowerIdFkChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActorPower", Storage="_Actor", ThisKey="ActorIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.ActorPowers.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.ActorPowers.Add(this);
						this._ActorIdFk = value.Id;
					}
					else
					{
						this._ActorIdFk = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		[Association(Name="Power_ActorPower", Storage="_Power", ThisKey="PowerIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Power Power
		{
			get
			{
				return this._Power.Entity;
			}
			set
			{
				Power previousValue = this._Power.Entity;
				if (((previousValue != value) 
							|| (this._Power.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Power.Entity = null;
						previousValue.ActorPowers.Remove(this);
					}
					this._Power.Entity = value;
					if ((value != null))
					{
						value.ActorPowers.Add(this);
						this._PowerIdFk = value.Id;
					}
					else
					{
						this._PowerIdFk = default(int);
					}
					this.SendPropertyChanged("Power");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActorSkill")]
	public partial class ActorSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorIdFk;
		
		private int _SkillIdFk;
		
		private System.Nullable<int> _Trained;
		
		private EntityRef<Actor> _Actor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIdFkChanging(int value);
    partial void OnActorIdFkChanged();
    partial void OnSkillIdFkChanging(int value);
    partial void OnSkillIdFkChanged();
    partial void OnTrainedChanging(System.Nullable<int> value);
    partial void OnTrainedChanged();
    #endregion
		
		public ActorSkill()
		{
			this._Actor = default(EntityRef<Actor>);
			OnCreated();
		}
		
		[Column(Storage="_ActorIdFk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActorIdFk
		{
			get
			{
				return this._ActorIdFk;
			}
			set
			{
				if ((this._ActorIdFk != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorIdFkChanging(value);
					this.SendPropertyChanging();
					this._ActorIdFk = value;
					this.SendPropertyChanged("ActorIdFk");
					this.OnActorIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_SkillIdFk", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SkillIdFk
		{
			get
			{
				return this._SkillIdFk;
			}
			set
			{
				if ((this._SkillIdFk != value))
				{
					this.OnSkillIdFkChanging(value);
					this.SendPropertyChanging();
					this._SkillIdFk = value;
					this.SendPropertyChanged("SkillIdFk");
					this.OnSkillIdFkChanged();
				}
			}
		}
		
		[Column(Storage="_Trained", DbType="Int")]
		public System.Nullable<int> Trained
		{
			get
			{
				return this._Trained;
			}
			set
			{
				if ((this._Trained != value))
				{
					this.OnTrainedChanging(value);
					this.SendPropertyChanging();
					this._Trained = value;
					this.SendPropertyChanged("Trained");
					this.OnTrainedChanged();
				}
			}
		}
		
		[Association(Name="Actor_ActorSkill", Storage="_Actor", ThisKey="ActorIdFk", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.ActorSkills.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.ActorSkills.Add(this);
						this._ActorIdFk = value.Id;
					}
					else
					{
						this._ActorIdFk = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CharacterClass")]
	public partial class CharacterClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Actor> _Actors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CharacterClass()
		{
			this._Actors = new EntitySet<Actor>(new Action<Actor>(this.attach_Actors), new Action<Actor>(this.detach_Actors));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CharacterClass_Actor", Storage="_Actors", OtherKey="CharacterClassFK")]
		public EntitySet<Actor> Actors
		{
			get
			{
				return this._Actors;
			}
			set
			{
				this._Actors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actors(Actor entity)
		{
			this.SendPropertyChanging();
			entity.CharacterClass = this;
		}
		
		private void detach_Actors(Actor entity)
		{
			this.SendPropertyChanging();
			entity.CharacterClass = null;
		}
	}
	
	[Table(Name="dbo.Deity")]
	public partial class Deity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Actor> _Actors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Deity()
		{
			this._Actors = new EntitySet<Actor>(new Action<Actor>(this.attach_Actors), new Action<Actor>(this.detach_Actors));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Deity_Actor", Storage="_Actors", OtherKey="DeityFK")]
		public EntitySet<Actor> Actors
		{
			get
			{
				return this._Actors;
			}
			set
			{
				this._Actors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actors(Actor entity)
		{
			this.SendPropertyChanging();
			entity.Deity = this;
		}
		
		private void detach_Actors(Actor entity)
		{
			this.SendPropertyChanging();
			entity.Deity = null;
		}
	}
	
	[Table(Name="dbo.Feat")]
	public partial class Feat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<bool> _IsRepeatable;
		
		private EntitySet<ActorFeat> _ActorFeats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsRepeatableChanging(System.Nullable<bool> value);
    partial void OnIsRepeatableChanged();
    #endregion
		
		public Feat()
		{
			this._ActorFeats = new EntitySet<ActorFeat>(new Action<ActorFeat>(this.attach_ActorFeats), new Action<ActorFeat>(this.detach_ActorFeats));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsRepeatable", DbType="Bit")]
		public System.Nullable<bool> IsRepeatable
		{
			get
			{
				return this._IsRepeatable;
			}
			set
			{
				if ((this._IsRepeatable != value))
				{
					this.OnIsRepeatableChanging(value);
					this.SendPropertyChanging();
					this._IsRepeatable = value;
					this.SendPropertyChanged("IsRepeatable");
					this.OnIsRepeatableChanged();
				}
			}
		}
		
		[Association(Name="Feat_ActorFeat", Storage="_ActorFeats", OtherKey="FeatIdFk")]
		public EntitySet<ActorFeat> ActorFeats
		{
			get
			{
				return this._ActorFeats;
			}
			set
			{
				this._ActorFeats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActorFeats(ActorFeat entity)
		{
			this.SendPropertyChanging();
			entity.Feat = this;
		}
		
		private void detach_ActorFeats(ActorFeat entity)
		{
			this.SendPropertyChanging();
			entity.Feat = null;
		}
	}
	
	[Table(Name="dbo.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Actor> _Actors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Player()
		{
			this._Actors = new EntitySet<Actor>(new Action<Actor>(this.attach_Actors), new Action<Actor>(this.detach_Actors));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Player_Actor", Storage="_Actors", OtherKey="PlayerFK")]
		public EntitySet<Actor> Actors
		{
			get
			{
				return this._Actors;
			}
			set
			{
				this._Actors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actors(Actor entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Actors(Actor entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
	
	[Table(Name="dbo.Power")]
	public partial class Power : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Level;
		
		private System.Nullable<byte> _Type;
		
		private System.Nullable<byte> _Action;
		
		private string _Keywords;
		
		private string _FlavorText;
		
		private string _Description;
		
		private EntitySet<ActorPower> _ActorPowers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    partial void OnTypeChanging(System.Nullable<byte> value);
    partial void OnTypeChanged();
    partial void OnActionChanging(System.Nullable<byte> value);
    partial void OnActionChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnFlavorTextChanging(string value);
    partial void OnFlavorTextChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Power()
		{
			this._ActorPowers = new EntitySet<ActorPower>(new Action<ActorPower>(this.attach_ActorPowers), new Action<ActorPower>(this.detach_ActorPowers));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt")]
		public System.Nullable<byte> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Action", DbType="TinyInt")]
		public System.Nullable<byte> Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[Column(Storage="_Keywords", DbType="NVarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[Column(Storage="_FlavorText", DbType="NVarChar(MAX)")]
		public string FlavorText
		{
			get
			{
				return this._FlavorText;
			}
			set
			{
				if ((this._FlavorText != value))
				{
					this.OnFlavorTextChanging(value);
					this.SendPropertyChanging();
					this._FlavorText = value;
					this.SendPropertyChanged("FlavorText");
					this.OnFlavorTextChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Power_ActorPower", Storage="_ActorPowers", OtherKey="PowerIdFk")]
		public EntitySet<ActorPower> ActorPowers
		{
			get
			{
				return this._ActorPowers;
			}
			set
			{
				this._ActorPowers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActorPowers(ActorPower entity)
		{
			this.SendPropertyChanging();
			entity.Power = this;
		}
		
		private void detach_ActorPowers(ActorPower entity)
		{
			this.SendPropertyChanging();
			entity.Power = null;
		}
	}
}
#pragma warning restore 1591
